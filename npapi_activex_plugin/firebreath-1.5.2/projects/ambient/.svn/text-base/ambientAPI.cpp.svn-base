/**********************************************************\

  Auto-generated ambientAPI.cpp

\**********************************************************/
#include "../../../../AmbientLib/AmbientLib.h"
#include "JSObject.h"
#include "variant_list.h"
#include "DOM/Document.h"
#include <Windows.h>
#include "ambientAPI.h"

///////////////////////////////////////////////////////////////////////////////
/// @fn ambientAPI::ambientAPI(const ambientPtr& plugin, const FB::BrowserHostPtr host)
///
/// @brief  Constructor for your JSAPI object.  You should register your methods, properties, and events
///         that should be accessible to Javascript from here.
///
/// @see FB::JSAPIAuto::registerMethod
/// @see FB::JSAPIAuto::registerProperty
/// @see FB::JSAPIAuto::registerEvent
///////////////////////////////////////////////////////////////////////////////
ambientAPI::ambientAPI(const ambientPtr& plugin, const FB::BrowserHostPtr& host) : m_plugin(plugin), m_host(host)
{
    registerMethod("echo",      make_method(this, &ambientAPI::echo));
    registerMethod("testEvent", make_method(this, &ambientAPI::testEvent));

    // Read-write property
    registerProperty("testString",
                     make_property(this,
                        &ambientAPI::get_testString,
                        &ambientAPI::set_testString));

    // Read-only property
    registerProperty("version",
                     make_property(this,
                        &ambientAPI::get_version));

	registerMethod("setCalculationRate", make_method(this, &ambientAPI::setCalculationRate));
	registerMethod("threadedCalculation", make_method(this, &ambientAPI::threadedCalculation));
	registerMethod("threadedCalculationFullscreen", make_method(this, &ambientAPI::threadedCalculationFullscreen));
	registerMethod("initialize", make_method(this, &ambientAPI::initialize));
	registerMethod("calcFrame", make_method(this, &ambientAPI::calcFrame));
	
	registerMethod("getErrorMessage",make_method(this, &ambientAPI::getErrorMessage));
	registerMethod("loadSEM",make_method(this, &ambientAPI::loadSEM));
	registerMethod("playEffectAtTimeAbs", make_method(this, &ambientAPI::playEffectAtTimeAbs));
	registerMethod("playEffectAtTimeRel", make_method(this, &ambientAPI::playEffectAtTimeRel));
	registerMethod("grabFrame",make_method(this,&ambientAPI::grabFrame));
	

	

}

///////////////////////////////////////////////////////////////////////////////
/// @fn ambientAPI::~ambientAPI()
///
/// @brief  Destructor.  Remember that this object will not be released until
///         the browser is done with it; this will almost definitely be after
///         the plugin is released.
///////////////////////////////////////////////////////////////////////////////
ambientAPI::~ambientAPI()
{
/*	if(ambientLib != NULL) delete ambientLib;
	SelectObject(hdcMemory, hbmOld);
	DeleteDC(hdcMemory);
	DeleteObject(hbmMemory);
	CloseHandle(this->calcMutex);
*/
}

///////////////////////////////////////////////////////////////////////////////
/// @fn ambientPtr ambientAPI::getPlugin()
///
/// @brief  Gets a reference to the plugin that was passed in when the object
///         was created.  If the plugin has already been released then this
///         will throw a FB::script_error that will be translated into a
///         javascript exception in the page.
///////////////////////////////////////////////////////////////////////////////
ambientPtr ambientAPI::getPlugin()
{
    ambientPtr plugin(m_plugin.lock());
    if (!plugin) {
        throw FB::script_error("The plugin is invalid");
    }
    return plugin;
}



// Read/Write property testString
std::string ambientAPI::get_testString()
{
    return m_testString;
}
void ambientAPI::set_testString(const std::string& val)
{
    m_testString = val;
}

// Read-only property version
std::string ambientAPI::get_version()
{
    return "CURRENT_VERSION";
}

// Method echo
FB::variant ambientAPI::echo(const FB::variant& msg)
{
    static int n(0);
    fire_echo(msg, n++);
    return msg;
}

void ambientAPI::testEvent(const FB::variant& var)
{
    fire_fired(var, true, 1);
}
unsigned int ambientAPI::grabFrame(unsigned int webBrowser, unsigned int scwidth, unsigned int scheight, unsigned int width, unsigned int height)
{
	ambientPtr plugin(m_plugin.lock());
	return plugin->grabFrame(webBrowser, scwidth, scheight, width, height);
}


unsigned int ambientAPI::getHeight()
{
	ambientPtr plugin(m_plugin.lock());
	return plugin->getHeight();
}

int ambientAPI::getErrorMessage()
{
	ambientPtr plugin(m_plugin.lock());
	return plugin->getErrorMessage();
}

void ambientAPI::loadSEM(std::string url, std::string file)
{
	ambientPtr plugin(m_plugin.lock());
	return plugin->loadSEM(url, file);
}

void ambientAPI::playEffectAtTimeRel(double time)
{
	ambientPtr plugin(m_plugin.lock());
	return plugin->playEffectAtTimeRel(time);
}

void ambientAPI::playEffectAtTimeAbs(double time)
{
	ambientPtr plugin(m_plugin.lock());
	return plugin->playEffectAtTimeAbs(time);
}

int ambientAPI::initialize(int framesToSkip, unsigned int width, unsigned int height){

	ambientPtr plugin(m_plugin.lock());
	return plugin->initialize(framesToSkip, width, height);
}

int ambientAPI::setCalculationRate(int pixelJump, int rowJump){

	ambientPtr plugin(m_plugin.lock());
	return plugin->setCalculationRate(pixelJump, rowJump);

}

int ambientAPI::calcFrame(){

	ambientPtr plugin(m_plugin.lock());
	return plugin->calcFrame();

}

unsigned int ambientAPI::threadedCalculationFullscreen(){
	
	ambientPtr plugin(m_plugin.lock());
	return plugin->threadedCalculationFullscreen();
}

int ambientAPI::threadedCalculation(int width, int height, std::string &d){
	ambientPtr plugin(m_plugin.lock());
	return plugin->threadedCalculation(width, height, d);
	
}
