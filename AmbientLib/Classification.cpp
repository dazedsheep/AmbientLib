/*
 * Classification.cpp
 *****************************************************************************
 * Copyright (C) 2011 - 2013 Alpen-Adria-Universität Klagenfurt
 *
 * Created on: April 9, 2011
 * Authors: Benjamin Rainer <benjamin.rainer@itec.aau.at>
 *			Markus Waltl	<markus.waltl@itec.aau.at>
 *
 * This file is part of ambientLib.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
 *****************************************************************************/

#include "stdafx.h"
#include "Classification.h"

// ColorCS
const std::string Classification::COLORURIBASE = "urn:mpeg:mpeg-v:01-SI-ColorCS-NS";	
const std::string Classification::COLOR_ALICE_BLUE = COLORURIBASE + ":alice_blue";
const std::string Classification::COLOR_ALIZARIN = COLORURIBASE + ":alizarin";
const std::string Classification::COLOR_AMARANTH = COLORURIBASE + ":amaranth";
const std::string Classification::COLOR_AMARANTH_PINK = COLORURIBASE + ":amaranth_pink";
const std::string Classification::COLOR_AMBER = COLORURIBASE + ":amber";
const std::string Classification::COLOR_AMETHYST = COLORURIBASE + ":amethyst";
const std::string Classification::COLOR_APRICOT = COLORURIBASE + ":apricot";
const std::string Classification::COLOR_AQUA = COLORURIBASE + ":aqua";
const std::string Classification::COLOR_AQUAMARINE = COLORURIBASE + ":aquamarine";
const std::string Classification::COLOR_ARMY_GREEN = COLORURIBASE + ":army_green";
const std::string Classification::COLOR_ASPARAGUS = COLORURIBASE + ":asparagus";
const std::string Classification::COLOR_ATOMIC_TANGERINE = COLORURIBASE + ":atomic_tangerine";
const std::string Classification::COLOR_AUBURN = COLORURIBASE + ":auburn";
const std::string Classification::COLOR_AZURE_COLOR_WHEEL = COLORURIBASE + ":azure_color_wheel";
const std::string Classification::COLOR_AZURE_WEB = COLORURIBASE + ":azure_web";
const std::string Classification::COLOR_BABY_BLUE = COLORURIBASE + ":baby_blue";
const std::string Classification::COLOR_BEIGE = COLORURIBASE + ":beige";
const std::string Classification::COLOR_BISTRE = COLORURIBASE + ":bistre";
const std::string Classification::COLOR_BLACK = COLORURIBASE + ":black";
const std::string Classification::COLOR_BLUE = COLORURIBASE + ":blue";
const std::string Classification::COLOR_BLUE_PIGMENT = COLORURIBASE + ":blue_pigment";
const std::string Classification::COLOR_BLUE_RYB = COLORURIBASE + ":blue_ryb";
const std::string Classification::COLOR_BLUE_GREEN = COLORURIBASE + ":blue-green";
const std::string Classification::COLOR_BLUE_VIOLET = COLORURIBASE + ":blue-violet";
const std::string Classification::COLOR_BONDI_BLUE = COLORURIBASE + ":bondi_blue";
const std::string Classification::COLOR_BRASS = COLORURIBASE + ":brass";
const std::string Classification::COLOR_BRIGHT_GREEN = COLORURIBASE + ":bright_green";
const std::string Classification::COLOR_BRIGHT_PINK = COLORURIBASE + ":bright_pink";
const std::string Classification::COLOR_BRIGHT_TURQUOISE = COLORURIBASE + ":bright_turquoise";
const std::string Classification::COLOR_BRILLIANT_ROSE = COLORURIBASE + ":brilliant_rose";
const std::string Classification::COLOR_BRINK_PINK = COLORURIBASE + ":brink_pink";
const std::string Classification::COLOR_BRONZE = COLORURIBASE + ":bronze"; 
const std::string Classification::COLOR_BROWN = COLORURIBASE + ":brown";
const std::string Classification::COLOR_BUFF = COLORURIBASE + ":buff";
const std::string Classification::COLOR_BURGUNDY = COLORURIBASE + ":burgundy";
const std::string Classification::COLOR_BURNT_ORANGE = COLORURIBASE + ":burnt_orange";
const std::string Classification::COLOR_BURNT_SIENNA = COLORURIBASE + ":burnt_sienna";
const std::string Classification::COLOR_BURNT_UMBER = COLORURIBASE + ":burnt_umber";
const std::string Classification::COLOR_CAMOUFLAGE_GREEN = COLORURIBASE + ":camouflage_green";
const std::string Classification::COLOR_CAPUT_MORTUUM = COLORURIBASE + ":caput_mortuum";
const std::string Classification::COLOR_CARDINAL = COLORURIBASE + ":cardinal";
const std::string Classification::COLOR_CARMINE = COLORURIBASE + ":carmine";
const std::string Classification::COLOR_CARMINE_PINK = COLORURIBASE + ":carmine_pink";
const std::string Classification::COLOR_CARNATION_PINK = COLORURIBASE + ":carnation_pink";
const std::string Classification::COLOR_CAROLINA_BLUE = COLORURIBASE + ":carolina_blue";
const std::string Classification::COLOR_CARROT_ORANGE = COLORURIBASE + ":carrot_orange";
const std::string Classification::COLOR_CELADON = COLORURIBASE + ":celadon";
const std::string Classification::COLOR_CERISE = COLORURIBASE + ":cerise";
const std::string Classification::COLOR_CERISE_PINK = COLORURIBASE + ":cerise_pink";
const std::string Classification::COLOR_CERULEAN = COLORURIBASE + ":cerulean";
const std::string Classification::COLOR_CERULEAN_BLUE = COLORURIBASE + ":cerulean_blue";
const std::string Classification::COLOR_CHAMPAGNE = COLORURIBASE + ":champagne";
const std::string Classification::COLOR_CHARCOAL = COLORURIBASE + ":charcoal";
const std::string Classification::COLOR_CHARTREUSE_TRADITIONAL = COLORURIBASE + ":chartreuse_traditional";
const std::string Classification::COLOR_CHARTREUSE_WEB = COLORURIBASE + ":chartreuse_web";
const std::string Classification::COLOR_CHERRY_BLOSSOM_PINK = COLORURIBASE + ":cherry_blossom_pink";
const std::string Classification::COLOR_CHESTNUT = COLORURIBASE + ":chestnut";
const std::string Classification::COLOR_CHOCOLATE = COLORURIBASE + ":chocolate";
const std::string Classification::COLOR_CINNABAR = COLORURIBASE + ":cinnabar";
const std::string Classification::COLOR_CINNAMON = COLORURIBASE + ":cinnamon";
const std::string Classification::COLOR_COBALT = COLORURIBASE + ":cobalt";
const std::string Classification::COLOR_COLUMBIA_BLUE = COLORURIBASE + ":columbia_blue";
const std::string Classification::COLOR_COPPER = COLORURIBASE + ":copper";
const std::string Classification::COLOR_COPPER_ROSE = COLORURIBASE + ":copper_rose";
const std::string Classification::COLOR_CORAL = COLORURIBASE + ":coral";
const std::string Classification::COLOR_CORAL_PINK = COLORURIBASE + ":coral_pink";
const std::string Classification::COLOR_CORAL_RED = COLORURIBASE + ":coral_red";
const std::string Classification::COLOR_CORN = COLORURIBASE + ":corn";
const std::string Classification::COLOR_CORNFLOWER_BLUE = COLORURIBASE + ":cornflower_blue";
const std::string Classification::COLOR_COSMIC_LATTE = COLORURIBASE + ":cosmic_latte";
const std::string Classification::COLOR_CREAM = COLORURIBASE + ":cream";
const std::string Classification::COLOR_CRIMSON = COLORURIBASE + ":crimson";
const std::string Classification::COLOR_CYAN = COLORURIBASE + ":cyan";
const std::string Classification::COLOR_CYAN_PROCESS = COLORURIBASE + ":cyan_process";
const std::string Classification::COLOR_DARK_BLUE = COLORURIBASE + ":dark_blue";
const std::string Classification::COLOR_DARK_BROWN = COLORURIBASE + ":dark_brown";
const std::string Classification::COLOR_DARK_CERULEAN = COLORURIBASE + ":dark_cerulean";
const std::string Classification::COLOR_DARK_CHESTNUT = COLORURIBASE + ":dark_chestnut";
const std::string Classification::COLOR_DARK_CORAL = COLORURIBASE + ":dark_coral";
const std::string Classification::COLOR_DARK_GOLDENROD = COLORURIBASE + ":dark_goldenrod";
const std::string Classification::COLOR_DARK_GREEN = COLORURIBASE + ":dark_green";
const std::string Classification::COLOR_DARK_KHAKI = COLORURIBASE + ":dark_khaki";
const std::string Classification::COLOR_DARK_MAGENTA = COLORURIBASE + ":dark_magenta";
const std::string Classification::COLOR_DARK_PASTEL_GREEN = COLORURIBASE + ":dark_pastel_green";
const std::string Classification::COLOR_DARK_PINK = COLORURIBASE + ":dark_pink";
const std::string Classification::COLOR_DARK_SCARLET = COLORURIBASE + ":dark_scarlet";
const std::string Classification::COLOR_DARK_SALMON = COLORURIBASE + ":dark_salmon";
const std::string Classification::COLOR_DARK_SLATE_GRAY = COLORURIBASE + ":dark_slate_gray";
const std::string Classification::COLOR_DARK_SPRING_GREEN = COLORURIBASE + ":dark_spring_green";
const std::string Classification::COLOR_DARK_TAN = COLORURIBASE + ":dark_tan";
const std::string Classification::COLOR_DARK_TURQUOISE = COLORURIBASE + ":dark_turquoise";
const std::string Classification::COLOR_DARK_VIOLET = COLORURIBASE + ":dark_violet";
const std::string Classification::COLOR_DEEP_CARMINE_PINK = COLORURIBASE + ":deep_carmine_pink";
const std::string Classification::COLOR_DEEP_CERISE = COLORURIBASE + ":deep_cerise";
const std::string Classification::COLOR_DEEP_CHESTNUT = COLORURIBASE + ":deep_chestnut";
const std::string Classification::COLOR_DEEP_FUCHSIA = COLORURIBASE + ":deep_fuchsia";
const std::string Classification::COLOR_DEEP_LILAC = COLORURIBASE + ":deep_lilac";
const std::string Classification::COLOR_DEEP_MAGENTA = COLORURIBASE + ":deep_magenta";
const std::string Classification::COLOR_DEEP_PEACH = COLORURIBASE + ":deep_peach";
const std::string Classification::COLOR_DEEP_PINK = COLORURIBASE + ":deep_pink";
const std::string Classification::COLOR_DENIM = COLORURIBASE + ":denim";
const std::string Classification::COLOR_DODGER_BLUE = COLORURIBASE + ":dodger_blue";
const std::string Classification::COLOR_ECRU = COLORURIBASE + ":ecru";
const std::string Classification::COLOR_EGYPTIAN_BLUE = COLORURIBASE + ":egyptian_blue";
const std::string Classification::COLOR_ELECTRIC_BLUE = COLORURIBASE + ":electric_blue";
const std::string Classification::COLOR_ELECTRIC_GREEN_X11_GREEN = COLORURIBASE + ":electric_green_x11_green";
const std::string Classification::COLOR_ELECTRIC_INDIGO = COLORURIBASE + ":electric_indigo";
const std::string Classification::COLOR_ELECTRIC_LIME = COLORURIBASE + ":electric_lime";
const std::string Classification::COLOR_ELECTRIC_PURPLE = COLORURIBASE + ":electric_purple";
const std::string Classification::COLOR_EMERALD = COLORURIBASE + ":emerald";
const std::string Classification::COLOR_EGGPLANT = COLORURIBASE + ":eggplant";
const std::string Classification::COLOR_FALU_RED = COLORURIBASE + ":falu_red";
const std::string Classification::COLOR_FERN_GREEN = COLORURIBASE + ":fern_green";
const std::string Classification::COLOR_FIREBRICK = COLORURIBASE + ":firebrick";
const std::string Classification::COLOR_FLAX = COLORURIBASE + ":flax";
const std::string Classification::COLOR_FOREST_GREEN = COLORURIBASE + ":forest_green";
const std::string Classification::COLOR_FRENCH_ROSE = COLORURIBASE + ":french_rose";
const std::string Classification::COLOR_FUCHSIA = COLORURIBASE + ":fuchsia";
const std::string Classification::COLOR_FUCHSIA_PINK = COLORURIBASE + ":fuchsia_pink";
const std::string Classification::COLOR_GAMBOGE = COLORURIBASE + ":gamboge";
const std::string Classification::COLOR_GOLD_METALLIC = COLORURIBASE + ":gold_metallic";
const std::string Classification::COLOR_GOLD_WEB_GOLDEN = COLORURIBASE + ":gold_web_golden";
const std::string Classification::COLOR_GOLDEN_BROWN = COLORURIBASE + ":golden_brown";
const std::string Classification::COLOR_GOLDEN_YELLOW = COLORURIBASE + ":golden_yellow";
const std::string Classification::COLOR_GOLDENROD = COLORURIBASE + ":goldenrod";
const std::string Classification::COLOR_GREY_ASPARAGUS = COLORURIBASE + ":grey-asparagus";
const std::string Classification::COLOR_GREEN_COLOR_WHEEL_X11_GREEN = COLORURIBASE + ":green_color_wheel_x11_green";
const std::string Classification::COLOR_GREEN_HTMLCSS_GREEN = COLORURIBASE + ":green_html/css_green";
const std::string Classification::COLOR_GREEN_PIGMENT = COLORURIBASE + ":green_pigment";
const std::string Classification::COLOR_GREEN_RYB = COLORURIBASE + ":green_ryb";
const std::string Classification::COLOR_GREEN_YELLOW = COLORURIBASE + ":green-yellow";
const std::string Classification::COLOR_GREY = COLORURIBASE + ":grey";
const std::string Classification::COLOR_HAN_PURPLE = COLORURIBASE + ":han_purple";
const std::string Classification::COLOR_HARLEQUIN = COLORURIBASE + ":harlequin";
const std::string Classification::COLOR_HELIOTROPE = COLORURIBASE + ":heliotrope";
const std::string Classification::COLOR_HOLLYWOOD_CERISE = COLORURIBASE + ":hollywood_cerise";
const std::string Classification::COLOR_HOT_MAGENTA = COLORURIBASE + ":hot_magenta";
const std::string Classification::COLOR_HOT_PINK = COLORURIBASE + ":hot_pink";
const std::string Classification::COLOR_INDIGO_DYE = COLORURIBASE + ":indigo_dye";
const std::string Classification::COLOR_INDIGO_WEB = COLORURIBASE + ":indigo_web";
const std::string Classification::COLOR_INTERNATIONAL_KLEIN_BLUE = COLORURIBASE + ":international_klein_blue";
const std::string Classification::COLOR_INTERNATIONAL_ORANGE = COLORURIBASE + ":international_orange";
const std::string Classification::COLOR_ISLAMIC_GREEN = COLORURIBASE + ":islamic_green";
const std::string Classification::COLOR_IVORY = COLORURIBASE + ":ivory";
const std::string Classification::COLOR_JADE = COLORURIBASE + ":jade";
const std::string Classification::COLOR_KELLY_GREEN = COLORURIBASE + ":kelly_green";
const std::string Classification::COLOR_KHAKI = COLORURIBASE + ":khaki";
const std::string Classification::COLOR_KHAKI_X11_LIGHT_KHAKI = COLORURIBASE + ":khaki_x11_light_khaki";
const std::string Classification::COLOR_LAVENDER_FLORAL = COLORURIBASE + ":lavender_floral";
const std::string Classification::COLOR_LAVENDER_WEB = COLORURIBASE + ":lavender_web";
const std::string Classification::COLOR_LAVENDER_BLUE = COLORURIBASE + ":lavender_blue";
const std::string Classification::COLOR_LAVENDER_BLUSH = COLORURIBASE + ":lavender_blush";
const std::string Classification::COLOR_LAVENDER_GREY = COLORURIBASE + ":lavender_grey";
const std::string Classification::COLOR_LAVENDER_MAGENTA = COLORURIBASE + ":lavender_magenta";
const std::string Classification::COLOR_LAVENDER_PINK = COLORURIBASE + ":lavender_pink";
const std::string Classification::COLOR_LAVENDER_PURPLE = COLORURIBASE + ":lavender_purple";
const std::string Classification::COLOR_LAVENDER_ROSE = COLORURIBASE + ":lavender_rose";
const std::string Classification::COLOR_LAWN_GREEN = COLORURIBASE + ":lawn_green";
const std::string Classification::COLOR_LEMON = COLORURIBASE + ":lemon";
const std::string Classification::COLOR_LEMON_CHIFFON = COLORURIBASE + ":lemon_chiffon";
const std::string Classification::COLOR_LIGHT_BLUE = COLORURIBASE + ":light_blue";
const std::string Classification::COLOR_LIGHT_PINK = COLORURIBASE + ":light_pink";
const std::string Classification::COLOR_LILAC = COLORURIBASE + ":lilac";
const std::string Classification::COLOR_LIME_COLOR_WHEEL = COLORURIBASE + ":lime_color_wheel";
const std::string Classification::COLOR_LIME_WEB_X11_GREEN = COLORURIBASE + ":lime_web_x11_green";
const std::string Classification::COLOR_LIME_GREEN = COLORURIBASE + ":lime_green";
const std::string Classification::COLOR_LINEN = COLORURIBASE + ":linen";
const std::string Classification::COLOR_MAGENTA = COLORURIBASE + ":magenta";
const std::string Classification::COLOR_MAGENTA_DYE = COLORURIBASE + ":magenta_dye";
const std::string Classification::COLOR_MAGENTA_PROCESS = COLORURIBASE + ":magenta_process";
const std::string Classification::COLOR_MAGIC_MINT = COLORURIBASE + ":magic_mint";
const std::string Classification::COLOR_MAGNOLIA = COLORURIBASE + ":magnolia";
const std::string Classification::COLOR_MALACHITE = COLORURIBASE + ":malachite";
const std::string Classification::COLOR_MAROON_HTMLCSS = COLORURIBASE + ":maroon_html/css";
const std::string Classification::COLOR_MAROON_X11 = COLORURIBASE + ":maroon_x11";
const std::string Classification::COLOR_MAYA_BLUE = COLORURIBASE + ":maya_blue";
const std::string Classification::COLOR_MAUVE = COLORURIBASE + ":mauve";
const std::string Classification::COLOR_MAUVE_TAUPE = COLORURIBASE + ":mauve_taupe";
const std::string Classification::COLOR_MEDIUM_BLUE = COLORURIBASE + ":medium_blue";
const std::string Classification::COLOR_MEDIUM_CARMINE = COLORURIBASE + ":medium_carmine";
const std::string Classification::COLOR_MEDIUM_LAVENDER_MAGENTA = COLORURIBASE + ":medium_lavender_magenta";
const std::string Classification::COLOR_MEDIUM_PURPLE = COLORURIBASE + ":medium_purple";
const std::string Classification::COLOR_MEDIUM_SPRING_GREEN = COLORURIBASE + ":medium_spring_green";
const std::string Classification::COLOR_MIDNIGHT_BLUE = COLORURIBASE + ":midnight_blue";
const std::string Classification::COLOR_MIDNIGHT_GREEN_EAGLE_GREEN = COLORURIBASE + ":midnight_green_eagle_green";
const std::string Classification::COLOR_MINT_GREEN = COLORURIBASE + ":mint_green";
const std::string Classification::COLOR_MISTY_ROSE = COLORURIBASE + ":misty_rose";
const std::string Classification::COLOR_MOSS_GREEN = COLORURIBASE + ":moss_green";
const std::string Classification::COLOR_MOUNTBATTEN_PINK = COLORURIBASE + ":mountbatten_pink";
const std::string Classification::COLOR_MUSTARD = COLORURIBASE + ":mustard";
const std::string Classification::COLOR_MYRTLE = COLORURIBASE + ":myrtle";
const std::string Classification::COLOR_NAVAJO_WHITE = COLORURIBASE + ":navajo_white";
const std::string Classification::COLOR_NAVY_BLUE = COLORURIBASE + ":navy_blue";
const std::string Classification::COLOR_OCHRE = COLORURIBASE + ":ochre";
const std::string Classification::COLOR_OFFICE_GREEN = COLORURIBASE + ":office_green";
const std::string Classification::COLOR_OLD_GOLD = COLORURIBASE + ":old_gold";
const std::string Classification::COLOR_OLD_LACE = COLORURIBASE + ":old_lace";
const std::string Classification::COLOR_OLD_LAVENDER = COLORURIBASE + ":old_lavender";
const std::string Classification::COLOR_OLD_ROSE = COLORURIBASE + ":old_rose";
const std::string Classification::COLOR_OLIVE = COLORURIBASE + ":olive";
const std::string Classification::COLOR_OLIVE_DRAB = COLORURIBASE + ":olive_drab";
const std::string Classification::COLOR_OLIVINE = COLORURIBASE + ":olivine";
const std::string Classification::COLOR_ORANGE_COLOR_WHEEL = COLORURIBASE + ":orange_color_wheel";
const std::string Classification::COLOR_ORANGE_RYB = COLORURIBASE + ":orange_ryb";
const std::string Classification::COLOR_ORANGE_WEB = COLORURIBASE + ":orange_web";
const std::string Classification::COLOR_ORANGE_PEEL = COLORURIBASE + ":orange_peel";
const std::string Classification::COLOR_ORANGE_RED = COLORURIBASE + ":orange-red";	    
const std::string Classification::COLOR_ORCHID = COLORURIBASE + ":orchid";	    
const std::string Classification::COLOR_PALE_BLUE = COLORURIBASE + ":pale_blue";	    
const std::string Classification::COLOR_PALE_BROWN = COLORURIBASE + ":pale_brown";	    
const std::string Classification::COLOR_PALE_CARMINE = COLORURIBASE + ":pale_carmine";	    
const std::string Classification::COLOR_PALE_CHESTNUT = COLORURIBASE + ":pale_chestnut";	    
const std::string Classification::COLOR_PALE_CORNFLOWER_BLUE = COLORURIBASE + ":pale_cornflower_blue";	    
const std::string Classification::COLOR_PALE_MAGENTA = COLORURIBASE + ":pale_magenta";	    
const std::string Classification::COLOR_PALE_PINK = COLORURIBASE + ":pale_pink";	    
const std::string Classification::COLOR_PALE_RED_VIOLET = COLORURIBASE + ":pale_red-violet";	    
const std::string Classification::COLOR_PAPAYA_WHIP = COLORURIBASE + ":papaya_whip";	    
const std::string Classification::COLOR_PASTEL_GREEN = COLORURIBASE + ":pastel_green";	    
const std::string Classification::COLOR_PASTEL_PINK = COLORURIBASE + ":pastel_pink";
const std::string Classification::COLOR_PEACH = COLORURIBASE + ":peach";	    
const std::string Classification::COLOR_PEACH_ORANGE = COLORURIBASE + ":peach-orange";	    
const std::string Classification::COLOR_PEACH_YELLOW = COLORURIBASE + ":peach-yellow";	    
const std::string Classification::COLOR_PEAR = COLORURIBASE + ":pear";	    
const std::string Classification::COLOR_PERIWINKLE = COLORURIBASE + ":periwinkle";	    
const std::string Classification::COLOR_PERSIAN_BLUE = COLORURIBASE + ":persian_blue";	    
const std::string Classification::COLOR_PERSIAN_GREEN = COLORURIBASE + ":persian_green";	    
const std::string Classification::COLOR_PERSIAN_INDIGO = COLORURIBASE + ":persian_indigo";	    
const std::string Classification::COLOR_PERSIAN_ORANGE = COLORURIBASE + ":persian_orange";	    
const std::string Classification::COLOR_PERSIAN_RED = COLORURIBASE + ":persian_red";	    
const std::string Classification::COLOR_PERSIAN_PINK = COLORURIBASE + ":persian_pink";	    
const std::string Classification::COLOR_PERSIAN_ROSE = COLORURIBASE + ":persian_rose";	    
const std::string Classification::COLOR_PERSIMMON = COLORURIBASE + ":persimmon";	    
const std::string Classification::COLOR_PINE_GREEN = COLORURIBASE + ":pine_green";	    
const std::string Classification::COLOR_PINK = COLORURIBASE + ":pink";	    
const std::string Classification::COLOR_PINK_ORANGE = COLORURIBASE + ":pink-orange";	    
const std::string Classification::COLOR_PLATINUM = COLORURIBASE + ":platinum";	    
const std::string Classification::COLOR_PLUM_WEB = COLORURIBASE + ":plum_web";	    
const std::string Classification::COLOR_POWDER_BLUE_WEB = COLORURIBASE + ":powder_blue_web";	    
const std::string Classification::COLOR_PUCE = COLORURIBASE + ":puce";	    
const std::string Classification::COLOR_PRUSSIAN_BLUE = COLORURIBASE + ":prussian_blue";	    
const std::string Classification::COLOR_PSYCHEDELIC_PURPLE = COLORURIBASE + ":psychedelic_purple";	    
const std::string Classification::COLOR_PUMPKIN = COLORURIBASE + ":pumpkin";	    
const std::string Classification::COLOR_PURPLE_HTMLCSS = COLORURIBASE + ":purple_html/css";	  	    
const std::string Classification::COLOR_PURPLE_X11 = COLORURIBASE + ":purple_x11";	    
const std::string Classification::COLOR_PURPLE_TAUPE = COLORURIBASE + ":purple_taupe";	    
const std::string Classification::COLOR_RAW_UMBER = COLORURIBASE + ":raw_umber";	    
const std::string Classification::COLOR_RAZZMATAZZ = COLORURIBASE + ":razzmatazz";	    
const std::string Classification::COLOR_RED = COLORURIBASE + ":red";	    
const std::string Classification::COLOR_RED_PIGMENT = COLORURIBASE + ":red_pigment";
const std::string Classification::COLOR_RED_RYB = COLORURIBASE + ":red_ryb";	    
const std::string Classification::COLOR_RED_VIOLET = COLORURIBASE + ":red-violet";	    
const std::string Classification::COLOR_RICH_CARMINE = COLORURIBASE + ":rich_carmine";	    
const std::string Classification::COLOR_ROBIN_EGG_BLUE = COLORURIBASE + ":robin_egg_blue";	    
const std::string Classification::COLOR_ROSE = COLORURIBASE + ":rose";	    
const std::string Classification::COLOR_ROSE_MADDER = COLORURIBASE + ":rose_madder";	    
const std::string Classification::COLOR_ROSE_TAUPE = COLORURIBASE + ":rose_taupe";	    
const std::string Classification::COLOR_ROYAL_BLUE = COLORURIBASE + ":royal_blue";
const std::string Classification::COLOR_ROYAL_PURPLE = COLORURIBASE + ":royal_purple";
const std::string Classification::COLOR_RUBY = COLORURIBASE + ":ruby";
const std::string Classification::COLOR_RUSSET = COLORURIBASE + ":russet";	    
const std::string Classification::COLOR_RUST = COLORURIBASE + ":rust";	    
const std::string Classification::COLOR_SAFETY_ORANGE_BLAZE_ORANGE = COLORURIBASE + ":safety_orange_blaze_orange";	    
const std::string Classification::COLOR_SAFFRON = COLORURIBASE + ":saffron";	    
const std::string Classification::COLOR_SALMON = COLORURIBASE + ":salmon";	    
const std::string Classification::COLOR_SANDY_BROWN = COLORURIBASE + ":sandy_brown";	    
const std::string Classification::COLOR_SANGRIA = COLORURIBASE + ":sangria";	    
const std::string Classification::COLOR_SAPPHIRE = COLORURIBASE + ":sapphire";	    
const std::string Classification::COLOR_SCARLET = COLORURIBASE + ":scarlet";	    
const std::string Classification::COLOR_SCHOOL_BUS_YELLOW = COLORURIBASE + ":school_bus_yellow";	    
const std::string Classification::COLOR_SEA_GREEN = COLORURIBASE + ":sea_green";	    	  
const std::string Classification::COLOR_SEASHELL = COLORURIBASE + ":seashell";	    
const std::string Classification::COLOR_SELECTIVE_YELLOW = COLORURIBASE + ":selective_yellow";	    
const std::string Classification::COLOR_SEPIA = COLORURIBASE + ":sepia";	    
const std::string Classification::COLOR_SHAMROCK_GREEN = COLORURIBASE + ":shamrock_green";	    
const std::string Classification::COLOR_SHOCKING_PINK = COLORURIBASE + ":shocking_pink";	    
const std::string Classification::COLOR_SILVER = COLORURIBASE + ":silver";	    
const std::string Classification::COLOR_SKY_BLUE = COLORURIBASE + ":sky_blue";	    
const std::string Classification::COLOR_SLATE_GREY = COLORURIBASE + ":slate_grey";	    
const std::string Classification::COLOR_SMALT_DARK_POWDER_BLUE = COLORURIBASE + ":smalt_dark_powder_blue";	    
const std::string Classification::COLOR_SPRING_BUD = COLORURIBASE + ":spring_bud";	    
const std::string Classification::COLOR_SPRING_GREEN = COLORURIBASE + ":spring_green";	    
const std::string Classification::COLOR_STEEL_BLUE = COLORURIBASE + ":steel_blue";	    
const std::string Classification::COLOR_TAN = COLORURIBASE + ":tan";	    
const std::string Classification::COLOR_TANGERINE = COLORURIBASE + ":tangerine";	    
const std::string Classification::COLOR_TANGERINE_YELLOW = COLORURIBASE + ":tangerine_yellow";	    
const std::string Classification::COLOR_TAUPE = COLORURIBASE + ":taupe";	    
const std::string Classification::COLOR_TEA_GREEN = COLORURIBASE + ":tea_green";	    
const std::string Classification::COLOR_TEA_ROSE_ORANGE = COLORURIBASE + ":tea_rose_orange";	    
const std::string Classification::COLOR_TEA_ROSE_ROSE = COLORURIBASE + ":tea_rose_rose";	    
const std::string Classification::COLOR_TEAL = COLORURIBASE + ":teal";	    
const std::string Classification::COLOR_TENNY_TAWNY = COLORURIBASE + ":tenny_tawny";	    
const std::string Classification::COLOR_TERRA_COTTA = COLORURIBASE + ":terra_cotta";	    
const std::string Classification::COLOR_THISTLE = COLORURIBASE + ":thistle";	    
const std::string Classification::COLOR_TOMATO = COLORURIBASE + ":tomato";	    
const std::string Classification::COLOR_TURQUOISE = COLORURIBASE + ":turquoise";	    
const std::string Classification::COLOR_TYRIAN_PURPLE = COLORURIBASE + ":tyrian_purple";
const std::string Classification::COLOR_ULTRAMARINE = COLORURIBASE + ":ultramarine";	    
const std::string Classification::COLOR_ULTRA_PINK = COLORURIBASE + ":ultra_pink";	    
const std::string Classification::COLOR_UNITED_NATIONS_BLUE = COLORURIBASE + ":united_nations_blue";	    
const std::string Classification::COLOR_VEGAS_GOLD = COLORURIBASE + ":vegas_gold";	    
const std::string Classification::COLOR_VERMILION = COLORURIBASE + ":vermilion";	    
const std::string Classification::COLOR_VIOLET = COLORURIBASE + ":violet";	    
const std::string Classification::COLOR_VIOLET_WEB = COLORURIBASE + ":violet_web";	    
const std::string Classification::COLOR_VIOLET_RYB = COLORURIBASE + ":violet_ryb";	    
const std::string Classification::COLOR_VIRIDIAN = COLORURIBASE + ":viridian";	    
const std::string Classification::COLOR_WHEAT = COLORURIBASE + ":wheat";
const std::string Classification::COLOR_WHITE = COLORURIBASE + ":white";	    
const std::string Classification::COLOR_WISTERIA = COLORURIBASE + ":wisteria";
const std::string Classification::COLOR_YELLOW = COLORURIBASE + ":yellow";
const std::string Classification::COLOR_YELLOW_PROCESS = COLORURIBASE + ":yellow_process";
const std::string Classification::COLOR_YELLOW_RYB = COLORURIBASE + ":yellow_ryb";
const std::string Classification::COLOR_YELLOW_GREEN = COLORURIBASE + ":yellow-green";

// LocationCS
const std::string Classification::LOCATIONURIBASE = "urn:mpeg:mpeg-v:01-SI-LocationCS-NS";
const std::string Classification::LOC_X_LEFT = ":left";
const std::string Classification::LOC_X_CENTERLEFT = ":centerleft";
const std::string Classification::LOC_X_CENTER = ":center";
const std::string Classification::LOC_X_CENTERRIGHT = ":centerright";
const std::string Classification::LOC_X_RIGHT = ":right";
const std::string Classification::LOC_Y_BOTTOM = ":bottom";
const std::string Classification::LOC_Y_MIDDLE = ":middle";
const std::string Classification::LOC_Y_TOP = ":top";
const std::string Classification::LOC_Z_BACK = ":back";
const std::string Classification::LOC_Z_MIDWAY = ":midway";
const std::string Classification::LOC_Z_FRONT = ":front";
const std::string Classification::LOC_EVERYWHERE = ":*";

// A.2.3	ScentCS
const std::string Classification::SCENTURIBASE = "urn:mpeg:mpeg-v:01-SI-ScentCS-NS";
const std::string Classification::SCENT_ROSE = SCENTURIBASE + ":rose";
const std::string Classification::SCENT_ACACIA = SCENTURIBASE + ":acacia";
const std::string Classification::SCENT_CHRYSANTHEMUM = SCENTURIBASE + ":chrysanthemum";
const std::string Classification::SCENT_LILAC = SCENTURIBASE + ":lilac";
const std::string Classification::SCENT_MINT = SCENTURIBASE + ":mint";
const std::string Classification::SCENT_JASMINE = SCENTURIBASE + ":jasmine";
const std::string Classification::SCENT_PINETREE = SCENTURIBASE + ":pine_tree";
const std::string Classification::SCENT_ORANGE = SCENTURIBASE + ":orange";
const std::string Classification::SCENT_GRAPE = SCENTURIBASE + ":grape";
const std::string Classification::SCENT_ALMONDS = SCENTURIBASE + ":almonds";
const std::string Classification::SCENT_AMARETTO = SCENTURIBASE + ":amaretto";
const std::string Classification::SCENT_APPLES_GREEN = SCENTURIBASE + ":apples_green";
const std::string Classification::SCENT_APPLES_RED = SCENTURIBASE + ":apples_red";
const std::string Classification::SCENT_BACON = SCENTURIBASE + ":bacon";
const std::string Classification::SCENT_BACON_SMOKEY = SCENTURIBASE + ":bacon_smokey";
const std::string Classification::SCENT_BANANA = SCENTURIBASE + ":banana";
const std::string Classification::SCENT_BANANA_SPLITS = SCENTURIBASE + ":banana_splits";
const std::string Classification::SCENT_BASIL_HERD = SCENTURIBASE + ":basil_herd";
const std::string Classification::SCENT_BEEF = SCENTURIBASE + ":beef";
const std::string Classification::SCENT_BLACKCURRANT = SCENTURIBASE + ":blackcurrant";
const std::string Classification::SCENT_BOILED_CABBAGE = SCENTURIBASE + ":boiled_cabbage";
const std::string Classification::SCENT_BRANDY = SCENTURIBASE + ":brandy";
const std::string Classification::SCENT_BREAD = SCENTURIBASE + ":bread";
const std::string Classification::SCENT_BUBBLE_GUM = SCENTURIBASE + ":bubble_gum";
const std::string Classification::SCENT_CAKE_SHOP = SCENTURIBASE + ":cake_shop";
const std::string Classification::SCENT_CANDY_FLOSS = SCENTURIBASE + ":candy_floss";
const std::string Classification::SCENT_CARAMEL_TOFFEE = SCENTURIBASE + ":caramel_toffee";
const std::string Classification::SCENT_CARROT = SCENTURIBASE + ":carrot";
const std::string Classification::SCENT_CELERY = SCENTURIBASE + ":celery";
const std::string Classification::SCENT_CHERRY = SCENTURIBASE + ":cherry";
const std::string Classification::SCENT_CHICKEN = SCENTURIBASE + ":chicken";
const std::string Classification::SCENT_COCONUT = SCENTURIBASE + ":coconut";
const std::string Classification::SCENT_CHOCOLATE_DARK = SCENTURIBASE + ":chocolate_dark";
const std::string Classification::SCENT_CHOCOLATE_ORANGE = SCENTURIBASE + ":chocolate_orange";
const std::string Classification::SCENT_CHRISTMAS_APPLE = SCENTURIBASE + ":christmas_apple";
const std::string Classification::SCENT_CHRISTMAS_PUDDING = SCENTURIBASE + ":christmas_pudding";
const std::string Classification::SCENT_CINNAMON = SCENTURIBASE + ":cinnamon";
const std::string Classification::SCENT_COFFEE_CHOCOLATE = SCENTURIBASE + ":coffee_chocolate";
const std::string Classification::SCENT_COFFEE_CREAM = SCENTURIBASE + ":coffee_cream";
const std::string Classification::SCENT_COLA = SCENTURIBASE + ":cola";
const std::string Classification::SCENT_CONFECTIONARY = SCENTURIBASE + ":confectionary";
const std::string Classification::SCENT_COOKIE = SCENTURIBASE + ":cookie";
const std::string Classification::SCENT_CORIANDER = SCENTURIBASE + ":coriander";
const std::string Classification::SCENT_CRUSTY_BREAD = SCENTURIBASE + ":crusty_bread";
const std::string Classification::SCENT_CURRY = SCENTURIBASE + ":curry";
const std::string Classification::SCENT_FISHMARKET = SCENTURIBASE + ":fishmarket";
const std::string Classification::SCENT_FRUIT_CAKE = SCENTURIBASE + ":fruit_cake";
const std::string Classification::SCENT_FRUIT_PUNCH_BR_FRUITY_SWEETS = SCENTURIBASE + ":fruit_punch_br_fruity_sweets";
const std::string Classification::SCENT_GARDEN_MINT = SCENTURIBASE + ":garden_mint";
const std::string Classification::SCENT_GARLIC = SCENTURIBASE + ":garlic";
const std::string Classification::SCENT_GINGERBREAD = SCENTURIBASE + ":gingerbread";
const std::string Classification::SCENT_GRANNIES_KITCHEN = SCENTURIBASE + ":grannies_kitchen";
const std::string Classification::SCENT_GRAPEFRUIT = SCENTURIBASE + ":grapefruit";
const std::string Classification::SCENT_HERBS_MIXED = SCENTURIBASE + ":herbs_mixed";
const std::string Classification::SCENT_HERRING = SCENTURIBASE + ":herring";
const std::string Classification::SCENT_HONEY = SCENTURIBASE + ":honey";
const std::string Classification::SCENT_HOT_APPLE_PIE = SCENTURIBASE + ":hot_apple_pie";
const std::string Classification::SCENT_IRISH_CREAM = SCENTURIBASE + ":irish_cream";
const std::string Classification::SCENT_JAMBALAYA = SCENTURIBASE + ":jambalaya";
const std::string Classification::SCENT_JELLY_BABIES = SCENTURIBASE + ":jelly_babies";
const std::string Classification::SCENT_KIWI_FRUIT = SCENTURIBASE + ":kiwi_fruit";
const std::string Classification::SCENT_LIME_SPLASH = SCENTURIBASE + ":lime_splash";
const std::string Classification::SCENT_LIQUORICE = SCENTURIBASE + ":liquorice";
const std::string Classification::SCENT_MANGO_DELIGHT = SCENTURIBASE + ":mango_delight";
const std::string Classification::SCENT_MELON = SCENTURIBASE + ":melon";
const std::string Classification::SCENT_MINT_CHOCOLATE = SCENTURIBASE + ":mint_chocolate";
const std::string Classification::SCENT_MULLED_WINE = SCENTURIBASE + ":mulled_wine";
const std::string Classification::SCENT_NUTMEG = SCENTURIBASE + ":nutmeg";
const std::string Classification::SCENT_ONION = SCENTURIBASE + ":onion";
const std::string Classification::SCENT_ORANGE_CUPCAKE = SCENTURIBASE + ":orange_cupcake";
const std::string Classification::SCENT_ORANGE_NF = SCENTURIBASE + ":orange_nf";
const std::string Classification::SCENT_PASSION_FRUIT = SCENTURIBASE + ":passion_fruit";
const std::string Classification::SCENT_PEACH_FLESH = SCENTURIBASE + ":peach_flesh";
const std::string Classification::SCENT_PEAR_DROPS = SCENTURIBASE + ":pear_drops";
const std::string Classification::SCENT_PEPPERMINT = SCENTURIBASE + ":peppermint";
const std::string Classification::SCENT_PINA_COLADA = SCENTURIBASE + ":pina_colada";
const std::string Classification::SCENT_PINEAPPLE = SCENTURIBASE + ":pineapple";
const std::string Classification::SCENT_POPCORN = SCENTURIBASE + ":popcorn";
const std::string Classification::SCENT_RASPBERRY = SCENTURIBASE + ":raspberry";
const std::string Classification::SCENT_RASPBERRY_RIPPLES = SCENTURIBASE + ":raspberry_ripples";
const std::string Classification::SCENT_RHUBARB = SCENTURIBASE + ":rhubarb";
const std::string Classification::SCENT_ROSEMARY = SCENTURIBASE + ":rosemary";
const std::string Classification::SCENT_RUM = SCENTURIBASE + ":rum";
const std::string Classification::SCENT_SMOKED_FISH = SCENTURIBASE + ":smoked_fish";
const std::string Classification::SCENT_SPICES_MIXED = SCENTURIBASE + ":spices_mixed";
const std::string Classification::SCENT_STIR_FRY = SCENTURIBASE + ":stir_fry";
const std::string Classification::SCENT_STRAWBERRY = SCENTURIBASE + ":strawberry";
const std::string Classification::SCENT_SUGAR_SPICE_CHRISTMAS_AROMA = SCENTURIBASE + ":sugar_spice_christmas_aroma";
const std::string Classification::SCENT_SWEET_SHERRY = SCENTURIBASE + ":sweet_sherry";
const std::string Classification::SCENT_TANGERINE = SCENTURIBASE + ":tangerine";
const std::string Classification::SCENT_TEA_LEAF = SCENTURIBASE + ":tea_leaf";
const std::string Classification::SCENT_THAI_CURRY = SCENTURIBASE + ":thai_curry";
const std::string Classification::SCENT_TOFFEE_APPLE = SCENTURIBASE + ":toffee_apple";
const std::string Classification::SCENT_TOMATO_PLANT = SCENTURIBASE + ":tomato_plant";
const std::string Classification::SCENT_WATERMELON = SCENTURIBASE + ":watermelon";
const std::string Classification::SCENT_WHISKY = SCENTURIBASE + ":whisky";
const std::string Classification::SCENT_WINE_OAK_CASK = SCENTURIBASE + ":wine_oak_cask";
const std::string Classification::SCENT_VANILLA = SCENTURIBASE + ":vanilla";
const std::string Classification::SCENT_WHISKY_SCOTCH = SCENTURIBASE + ":whisky_scotch";
const std::string Classification::SCENT_ALPINE_LAUNDRY_POWDER = SCENTURIBASE + ":alpine_laundry_powder";
const std::string Classification::SCENT_ALPINE = SCENTURIBASE + ":alpine";
const std::string Classification::SCENT_AMULET = SCENTURIBASE + ":amulet";
const std::string Classification::SCENT_AQUAWAVE = SCENTURIBASE + ":aquawave";
const std::string Classification::SCENT_ARISTOCRAT = SCENTURIBASE + ":aristocrat";
const std::string Classification::SCENT_BABY_POWDER = SCENTURIBASE + ":baby_powder";
const std::string Classification::SCENT_BEAUTY_SOAP = SCENTURIBASE + ":beauty_soap";
const std::string Classification::SCENT_BERGAMOT = SCENTURIBASE + ":bergamot";
const std::string Classification::SCENT_BOILER_ROOM = SCENTURIBASE + ":boiler_room";
const std::string Classification::SCENT_BOUQUET = SCENTURIBASE + ":bouquet";
const std::string Classification::SCENT_BREWERY = SCENTURIBASE + ":brewery";
const std::string Classification::SCENT_BURNING_PEAT = SCENTURIBASE + ":burning_peat";
const std::string Classification::SCENT_BURNT_WOOD = SCENTURIBASE + ":burnt_wood";
const std::string Classification::SCENT_CANNON = SCENTURIBASE + ":cannon";
const std::string Classification::SCENT_CARNATION = SCENTURIBASE + ":carnation";
const std::string Classification::SCENT_CARIBBEAN_HOLIDAY = SCENTURIBASE + ":caribbean_holiday";
const std::string Classification::SCENT_CARBOLIC_SOAP = SCENTURIBASE + ":carbolic_soap";
const std::string Classification::SCENT_CEDAR_WOOD = SCENTURIBASE + ":cedar_wood";
const std::string Classification::SCENT_CHAMOMILE = SCENTURIBASE + ":chamomile";
const std::string Classification::SCENT_CHRISTMAS_BERRIES = SCENTURIBASE + ":christmas_berries";
const std::string Classification::SCENT_CHRISTMAS_TREE = SCENTURIBASE + ":christmas_tree";
const std::string Classification::SCENT_CHRISTMAS_TIME = SCENTURIBASE + ":christmas_time";
const std::string Classification::SCENT_CHURCH_INCENSE = SCENTURIBASE + ":church_incense";
const std::string Classification::SCENT_CLOISTERS = SCENTURIBASE + ":cloisters";
const std::string Classification::SCENT_CLINIC_HOSPITAL = SCENTURIBASE + ":clinic_hospital";
const std::string Classification::SCENT_COAL_FACE = SCENTURIBASE + ":coal_face";
const std::string Classification::SCENT_COAL_FIRE = SCENTURIBASE + ":coal_fire";
const std::string Classification::SCENT_COAL_GAS = SCENTURIBASE + ":coal_gas";
const std::string Classification::SCENT_COCOMANGO = SCENTURIBASE + ":cocomango";
const std::string Classification::SCENT_CUBAN_CIGAR_SMOKE = SCENTURIBASE + ":cuban_cigar_smoke";
const std::string Classification::SCENT_CUT_GRASS = SCENTURIBASE + ":cut_grass";
const std::string Classification::SCENT_DEEP_HEAT = SCENTURIBASE + ":deep_heat";
const std::string Classification::SCENT_DENTIST_CLOVE_OIL = SCENTURIBASE + ":dentist-clove_oil";
const std::string Classification::SCENT_DINOSAUR = SCENTURIBASE + ":dinosaur";
const std::string Classification::SCENT_DIRTY_LINEN = SCENTURIBASE + ":dirty_linen";
const std::string Classification::SCENT_DRAGONS_BREATH = SCENTURIBASE + ":dragons_breath";
const std::string Classification::SCENT_DRESSING_ROOM_FOOTBALL = SCENTURIBASE + ":dressing_room_football";
const std::string Classification::SCENT_EARTHY = SCENTURIBASE + ":earthy";
const std::string Classification::SCENT_EAU_DE_COLOGNE = SCENTURIBASE + ":eau_de_cologne";
const std::string Classification::SCENT_EUCALYPTUS = SCENTURIBASE + ":eucalyptus";
const std::string Classification::SCENT_EAU_DE_COLOGNE_FACTORY = SCENTURIBASE + ":eau_de_cologne_factory";
const std::string Classification::SCENT_FARMYARD = SCENTURIBASE + ":farmyard";
const std::string Classification::SCENT_FACTORY = SCENTURIBASE + ":factory";
const std::string Classification::SCENT_FISH_MARKET = SCENTURIBASE + ":fish_market";
const std::string Classification::SCENT_FLATULENCE = SCENTURIBASE + ":flatulence";
const std::string Classification::SCENT_FOOTIE_PITCH = SCENTURIBASE + ":footie_pitch";
const std::string Classification::SCENT_FOREST = SCENTURIBASE + ":forest";
const std::string Classification::SCENT_FOX = SCENTURIBASE + ":fox";
const std::string Classification::SCENT_FREESIA = SCENTURIBASE + ":freesia";
const std::string Classification::SCENT_FRESH_AIR = SCENTURIBASE + ":fresh_air";
const std::string Classification::SCENT_FROSTY = SCENTURIBASE + ":frosty";
const std::string Classification::SCENT_GOLDEN_ONE = SCENTURIBASE + ":golden_one";
const std::string Classification::SCENT_GRASS_HAY = SCENTURIBASE + ":grass_hay";
const std::string Classification::SCENT_GUN_SMOKE = SCENTURIBASE + ":gun_smoke";
const std::string Classification::SCENT_HAVANA_CIGAR = SCENTURIBASE + ":havana_cigar";
const std::string Classification::SCENT_HAWAIIAN = SCENTURIBASE + ":hawaiian";
const std::string Classification::SCENT_HEATHER_BRACKEN = SCENTURIBASE + ":heather_bracken";
const std::string Classification::SCENT_HONEYSUCKLE = SCENTURIBASE + ":honeysuckle";
const std::string Classification::SCENT_HOSPITAL_MODERN_DAY = SCENTURIBASE + ":hospital_modern_day";
const std::string Classification::SCENT_HYACINTH = SCENTURIBASE + ":hyacinth";
const std::string Classification::SCENT_INCENSE = SCENTURIBASE + ":incense";
const std::string Classification::SCENT_IRON_SMELTING = SCENTURIBASE + ":iron_smelting";
const std::string Classification::SCENT_JAGUAR_SPRAY = SCENTURIBASE + ":jaguar_spray";
const std::string Classification::SCENT_JAPANESE_POW = SCENTURIBASE + ":japanese_pow";
const std::string Classification::SCENT_LAVENDER = SCENTURIBASE + ":lavender";
const std::string Classification::SCENT_LEATHER_CREAM = SCENTURIBASE + ":leather_cream";
const std::string Classification::SCENT_LEATHER_HIDE = SCENTURIBASE + ":leather_hide";
const std::string Classification::SCENT_LEMON_EUCALYPTUS_MINT = SCENTURIBASE + ":lemon_eucalyptus_mint";
const std::string Classification::SCENT_MACHINE_OIL = SCENTURIBASE + ":machine_oil";
const std::string Classification::SCENT_MAHOGANY = SCENTURIBASE + ":mahogany";
const std::string Classification::SCENT_MAN_O_WAR = SCENTURIBASE + ":man_o_war";
const std::string Classification::SCENT_MANURE_BR_METHANE = SCENTURIBASE + ":manure_br_methane";
const std::string Classification::SCENT_MODERN_DAY_HOSPITAL = SCENTURIBASE + ":modern_day_hospital";
const std::string Classification::SCENT_MOUNTAIN_HEATHER = SCENTURIBASE + ":mountain_heather";
const std::string Classification::SCENT_MUMMY_EGYPTIAN = SCENTURIBASE + ":mummy_egyptian";
const std::string Classification::SCENT_MUSTY = SCENTURIBASE + ":musty";
const std::string Classification::SCENT_OAK = SCENTURIBASE + ":oak";
const std::string Classification::SCENT_OLD_DRIFTER_SHIP = SCENTURIBASE + ":old_drifter_ship";
const std::string Classification::SCENT_OLD_INN = SCENTURIBASE + ":old_inn";
const std::string Classification::SCENT_OLD_RIVER = SCENTURIBASE + ":old_river";
const std::string Classification::SCENT_OLD_SMITHY = SCENTURIBASE + ":old_smithy";
const std::string Classification::SCENT_OUT_AT_SEA = SCENTURIBASE + ":out_at_sea";
const std::string Classification::SCENT_OZONE = SCENTURIBASE + ":ozone";
const std::string Classification::SCENT_PEAT = SCENTURIBASE + ":peat";
const std::string Classification::SCENT_PENCIL_WOOD_SHAVINGS = SCENTURIBASE + ":pencil_wood_shavings";
const std::string Classification::SCENT_PEONY = SCENTURIBASE + ":peony";
const std::string Classification::SCENT_PHOSGENE_GAS = SCENTURIBASE + ":phosgene_gas";
const std::string Classification::SCENT_PINE = SCENTURIBASE + ":pine";
const std::string Classification::SCENT_PINEAPPLE_PLANTATION = SCENTURIBASE + ":pineapple_plantation";
const std::string Classification::SCENT_PINE_HEATHER_PEAT = SCENTURIBASE + ":pine_heather_peat";
const std::string Classification::SCENT_PIT_PONIES = SCENTURIBASE + ":pit_ponies";
const std::string Classification::SCENT_POLISH_WAX = SCENTURIBASE + ":polish-wax";
const std::string Classification::SCENT_POT_POURRI = SCENTURIBASE + ":pot-pourri";
const std::string Classification::SCENT_RIVERBANK = SCENTURIBASE + ":riverbank";
const std::string Classification::SCENT_RIVER_TROPICS = SCENTURIBASE + ":river_tropics";
const std::string Classification::SCENT_ROPE_TAR = SCENTURIBASE + ":rope_tar";
const std::string Classification::SCENT_ROSEWOOD = SCENTURIBASE + ":rosewood";
const std::string Classification::SCENT_RUBBISH_ACRID = SCENTURIBASE + ":rubbish_acrid";
const std::string Classification::SCENT_SANDALWOOD = SCENTURIBASE + ":sandalwood";
const std::string Classification::SCENT_SANDALWOOD_BASIL = SCENTURIBASE + ":sandalwood_basil";
const std::string Classification::SCENT_SEA_BREEZE = SCENTURIBASE + ":sea_breeze";
const std::string Classification::SCENT_SEA_SHORE = SCENTURIBASE + ":sea_shore";
const std::string Classification::SCENT_SHEBA = SCENTURIBASE + ":sheba";
const std::string Classification::SCENT_SHIPS_CANNON = SCENTURIBASE + ":ships_cannon";
const std::string Classification::SCENT_SNOWDROP = SCENTURIBASE + ":snowdrop";
const std::string Classification::SCENT_SPORTS_CHANGING_ROOM = SCENTURIBASE + ":sports_changing_room";
const std::string Classification::SCENT_STABLES_HORSES = SCENTURIBASE + ":stables_horses";
const std::string Classification::SCENT_STARS_DRESSING_ROOM = SCENTURIBASE + ":stars_dressing_room";
const std::string Classification::SCENT_STEAM_OIL_SHIPS = SCENTURIBASE + ":steam_oil_ships";
const std::string Classification::SCENT_STEAM_OIL_TRAINS = SCENTURIBASE + ":steam_oil_trains";
const std::string Classification::SCENT_STREET_1930S = SCENTURIBASE + ":street_1930s";
const std::string Classification::SCENT_STREET_BOMB = SCENTURIBASE + ":street_bomb";
const std::string Classification::SCENT_SUN_SAND_COCONUT = SCENTURIBASE + ":sun_sand_coconut";
const std::string Classification::SCENT_SWAMP = SCENTURIBASE + ":swamp";
const std::string Classification::SCENT_SWEATY_FEET = SCENTURIBASE + ":sweaty_feet";
const std::string Classification::SCENT_SWEET_PEAS = SCENTURIBASE + ":sweet_peas";
const std::string Classification::SCENT_TOBACCO_LEAF = SCENTURIBASE + ":tobacco_leaf";
const std::string Classification::SCENT_TRAIN_SMOKE = SCENTURIBASE + ":train_smoke";
const std::string Classification::SCENT_TROPHY_ROOM = SCENTURIBASE + ":trophy_room";
const std::string Classification::SCENT_TROPICAL = SCENTURIBASE + ":tropical";
const std::string Classification::SCENT_TROPICAL_RAIN_FOREST = SCENTURIBASE + ":tropical_rain_forest";
const std::string Classification::SCENT_UNISEX_PERFUME = SCENTURIBASE + ":unisex_perfume";
const std::string Classification::SCENT_URINE = SCENTURIBASE + ":urine";
const std::string Classification::SCENT_USA_SWAMP = SCENTURIBASE + ":usa_swamp";
const std::string Classification::SCENT_VICTORIAN_LAVENDER = SCENTURIBASE + ":victorian_lavender";
const std::string Classification::SCENT_VIOLETS = SCENTURIBASE + ":violets";
const std::string Classification::SCENT_VOLCANO = SCENTURIBASE + ":volcano";
const std::string Classification::SCENT_VOMIT = SCENTURIBASE + ":vomit";
const std::string Classification::SCENT_WALLFLOWER = SCENTURIBASE + ":wallflower";
const std::string Classification::SCENT_WASHDAY = SCENTURIBASE + ":washday";
const std::string Classification::SCENT_WILD_STAG = SCENTURIBASE + ":wild_stag";
const std::string Classification::SCENT_WINE_CASK_OAK = SCENTURIBASE + ":wine_cask-oak";
const std::string Classification::SCENT_WISTERIA = SCENTURIBASE + ":wisteria";
const std::string Classification::SCENT_WOODSMOKE = SCENTURIBASE + ":woodsmoke";
const std::string Classification::SCENT_YLANG_JASMIN_MYRRH = SCENTURIBASE + ":ylang_jasmin_myrrh";
const std::string Classification::SCENT_YULETIDE = SCENTURIBASE + ":yuletide";
const std::string Classification::SCENT_AFRICAN_RAIN = SCENTURIBASE + ":african_rain";
const std::string Classification::SCENT_ALLEGRIA = SCENTURIBASE + ":allegria";
const std::string Classification::SCENT_AMBER = SCENTURIBASE + ":amber";
const std::string Classification::SCENT_APPLE_GREEN = SCENTURIBASE + ":apple_green";
const std::string Classification::SCENT_ASAFOETIDA = SCENTURIBASE + ":asafoetida";
const std::string Classification::SCENT_AUTUMN_FIELDS = SCENTURIBASE + ":autumn_fields";
const std::string Classification::SCENT_AUTUMN_HARVEST = SCENTURIBASE + ":autumn_harvest";
const std::string Classification::SCENT_BALSAM_FIR = SCENTURIBASE + ":balsam_fir";
const std::string Classification::SCENT_BALSAM_FIR_NEEDLE = SCENTURIBASE + ":balsam_fir_needle";
const std::string Classification::SCENT_BARNYARD = SCENTURIBASE + ":barnyard";
const std::string Classification::SCENT_BEER = SCENTURIBASE + ":beer";
const std::string Classification::SCENT_BENZOIN = SCENTURIBASE + ":benzoin";
const std::string Classification::SCENT_BIRCH_TAR = SCENTURIBASE + ":birch_tar";
const std::string Classification::SCENT_BIRTHDAY_CAKE = SCENTURIBASE + ":birthday_cake";
const std::string Classification::SCENT_BLUEBERRY_COBBLER = SCENTURIBASE + ":blueberry_cobbler";
const std::string Classification::SCENT_BOUQUET_OF_ROSES = SCENTURIBASE + ":bouquet_of_roses";
const std::string Classification::SCENT_BUCHU = SCENTURIBASE + ":buchu";
const std::string Classification::SCENT_BURNING_RUBBER = SCENTURIBASE + ":burning_rubber";
const std::string Classification::SCENT_CACTUS_FLOWER = SCENTURIBASE + ":cactus_flower";
const std::string Classification::SCENT_CADE = SCENTURIBASE + ":cade";
const std::string Classification::SCENT_CAMPFIRE = SCENTURIBASE + ":campfire";
const std::string Classification::SCENT_CAMPFIRE_SMOKE = SCENTURIBASE + ":campfire_smoke";
const std::string Classification::SCENT_CAMPHOR = SCENTURIBASE + ":camphor";
const std::string Classification::SCENT_CARIBBEAN_NIGHT = SCENTURIBASE + ":caribbean_night";
const std::string Classification::SCENT_CEDAR = SCENTURIBASE + ":cedar";
const std::string Classification::SCENT_CHAMPAGNE_STRAWBERRIES = SCENTURIBASE + ":champagne_strawberries";
const std::string Classification::SCENT_CHANEL_NO5_TYPE = SCENTURIBASE + ":chanel_no5_type";
const std::string Classification::SCENT_CHOCOLATE = SCENTURIBASE + ":chocolate";
const std::string Classification::SCENT_CHRISTMAS_COOKIES = SCENTURIBASE + ":christmas_cookies";
const std::string Classification::SCENT_CLEAN_COTTON = SCENTURIBASE + ":clean_cotton";
const std::string Classification::SCENT_COTTON_CANDY = SCENTURIBASE + ":cotton_candy";
const std::string Classification::SCENT_CREME_BRULE = SCENTURIBASE + ":creme_brule";
const std::string Classification::SCENT_CYPRESS_GROVE = SCENTURIBASE + ":cypress_grove";
const std::string Classification::SCENT_DUMPSTER = SCENTURIBASE + ":dumpster";
const std::string Classification::SCENT_DUNG = SCENTURIBASE + ":dung";
const std::string Classification::SCENT_EASTER_LILLIES = SCENTURIBASE + ":easter_lillies";
const std::string Classification::SCENT_EGG_NOG_2 = SCENTURIBASE + ":egg_nog_2";
const std::string Classification::SCENT_EUCALYPTUS_DIVES = SCENTURIBASE + ":eucalyptus_dives";
const std::string Classification::SCENT_EVERGREEN = SCENTURIBASE + ":evergreen";
const std::string Classification::SCENT_EXHAUST = SCENTURIBASE + ":exhaust";
const std::string Classification::SCENT_FISH = SCENTURIBASE + ":fish";
const std::string Classification::SCENT_FOREST_RAIN = SCENTURIBASE + ":forest_rain";
const std::string Classification::SCENT_FORGET_ME_NOT = SCENTURIBASE + ":forget-me-not";
const std::string Classification::SCENT_FRANGIPANI = SCENTURIBASE + ":frangipani";
const std::string Classification::SCENT_FRENCH_FRIES = SCENTURIBASE + ":french_fries";
const std::string Classification::SCENT_FRESH_BREAD = SCENTURIBASE + ":fresh_bread";
const std::string Classification::SCENT_FRESH_CUT_GRASS = SCENTURIBASE + ":fresh_cut_grass";
const std::string Classification::SCENT_FRESH_LAUNDRY = SCENTURIBASE + ":fresh_laundry";
const std::string Classification::SCENT_FRYING_BACON = SCENTURIBASE + ":frying_bacon";
const std::string Classification::SCENT_FUDGE_BROWNIE = SCENTURIBASE + ":fudge_brownie";
const std::string Classification::SCENT_GARDENIA = SCENTURIBASE + ":gardenia";
const std::string Classification::SCENT_GRANDMAS_ATTIC = SCENTURIBASE + ":grandmas_attic";
const std::string Classification::SCENT_HALLOWEEN_GREASEPAINT = SCENTURIBASE + ":halloween_greasepaint";
const std::string Classification::SCENT_HAWAIAN_TREAT = SCENTURIBASE + ":hawaian_treat";
const std::string Classification::SCENT_INDIAN_SUMMER = SCENTURIBASE + ":indian_summer";
const std::string Classification::SCENT_JET_FUEL = SCENTURIBASE + ":jet_fuel";
const std::string Classification::SCENT_JUNIPER_BERRY = SCENTURIBASE + ":juniper_berry";
const std::string Classification::SCENT_LEATHER = SCENTURIBASE + ":leather";
const std::string Classification::SCENT_LOTUS = SCENTURIBASE + ":lotus";
const std::string Classification::SCENT_MANGO_MANDARIN = SCENTURIBASE + ":mango_mandarin";
const std::string Classification::SCENT_MAPLE_SYRUP = SCENTURIBASE + ":maple_syrup";
const std::string Classification::SCENT_MILDEW = SCENTURIBASE + ":mildew";
const std::string Classification::SCENT_MOTHER_EARTH = SCENTURIBASE + ":mother_earth";
const std::string Classification::SCENT_MUSK = SCENTURIBASE + ":musk";
const std::string Classification::SCENT_NEW_MOWN_GRASS_2 = SCENTURIBASE + ":new_mown_grass_2";
const std::string Classification::SCENT_NEW_MOWN_GRASS_3 = SCENTURIBASE + ":new_mown_grass_3";
const std::string Classification::SCENT_OAK_MOSS = SCENTURIBASE + ":oak_moss";
const std::string Classification::SCENT_OPEN_FIREPLACE = SCENTURIBASE + ":open_fireplace";
const std::string Classification::SCENT_PALMAROSA = SCENTURIBASE + ":palmarosa";
const std::string Classification::SCENT_PANCAKES_AND_MAPLE_SYRUP = SCENTURIBASE + ":pancakes_and_maple_syrup";
const std::string Classification::SCENT_PATCHOULI = SCENTURIBASE + ":patchouli";
const std::string Classification::SCENT_PECAN_PIE = SCENTURIBASE + ":pecan_pie";
const std::string Classification::SCENT_RAIN_FOREST = SCENTURIBASE + ":rain_forest";
const std::string Classification::SCENT_RICH_POTTING_SOIL = SCENTURIBASE + ":rich_potting_soil";
const std::string Classification::SCENT_ROASTED_CHICKEN = SCENTURIBASE + ":roasted_chicken";
const std::string Classification::SCENT_SAGE_DALMATIAN = SCENTURIBASE + ":sage_dalmatian";
const std::string Classification::SCENT_SEAWEED = SCENTURIBASE + ":seaweed";
const std::string Classification::SCENT_SPANISH_MOSS = SCENTURIBASE + ":spanish_moss";
const std::string Classification::SCENT_SPRING_BOUQUET = SCENTURIBASE + ":spring_bouquet";
const std::string Classification::SCENT_SUNTAN = SCENTURIBASE + ":suntan";
const std::string Classification::SCENT_THYME_BORNEOL = SCENTURIBASE + ":thyme_borneol";
const std::string Classification::SCENT_TOMATO_VINE = SCENTURIBASE + ":tomato_vine";
const std::string Classification::SCENT_TUBEROSE = SCENTURIBASE + ":tuberose";
const std::string Classification::SCENT_VIOLET = SCENTURIBASE + ":violet";
const std::string Classification::SCENT_WARMING_GINGER = SCENTURIBASE + ":warming_ginger";
const std::string Classification::SCENT_YLANG_YLANG = SCENTURIBASE + ":ylang_ylang";

// A.2.6 SprayingTypeCS
const std::string Classification::SPRAYINGTYPEURIBASE = "urn:mpeg:mpeg-v:01-SI-SprayingTypeCS-NS";
const std::string Classification::SPRAYINGTYPE_WATER = SPRAYINGTYPEURIBASE + ":water";

Classification::Classification()
{
	colorTable.insert(std::make_pair(COLOR_ALICE_BLUE, RGB( 240, 248, 255 )));
	colorTable.insert(std::make_pair(COLOR_ALIZARIN, RGB( 227, 38, 54 )));
	colorTable.insert(std::make_pair(COLOR_AMARANTH, RGB( 229, 43, 80 )));
	colorTable.insert(std::make_pair(COLOR_AMARANTH_PINK, RGB( 241, 156, 187 )));
	colorTable.insert(std::make_pair(COLOR_AMBER, RGB( 255, 191, 0 )));
	colorTable.insert(std::make_pair(COLOR_AMETHYST, RGB( 153, 102, 204 )));
	colorTable.insert(std::make_pair(COLOR_APRICOT, RGB( 251, 206, 177 )));
	colorTable.insert(std::make_pair(COLOR_AQUA, RGB( 0, 255, 255 )));
	colorTable.insert(std::make_pair(COLOR_AQUAMARINE, RGB( 127, 255, 212 )));
	colorTable.insert(std::make_pair(COLOR_ARMY_GREEN, RGB( 75, 83, 32 )));
	colorTable.insert(std::make_pair(COLOR_ASPARAGUS, RGB( 123, 160, 91 )));
	colorTable.insert(std::make_pair(COLOR_ATOMIC_TANGERINE, RGB( 255, 153, 102 )));
	colorTable.insert(std::make_pair(COLOR_AUBURN, RGB( 111, 53, 26 )));
	colorTable.insert(std::make_pair(COLOR_AZURE_COLOR_WHEEL, RGB( 0, 127, 255 )));
	colorTable.insert(std::make_pair(COLOR_AZURE_WEB, RGB( 0, 255, 255 )));
	colorTable.insert(std::make_pair(COLOR_BABY_BLUE, RGB( 224, 255, 255 )));
	colorTable.insert(std::make_pair(COLOR_BEIGE, RGB( 245, 245, 220 )));
	colorTable.insert(std::make_pair(COLOR_BISTRE, RGB( 61, 43, 31 )));
	colorTable.insert(std::make_pair(COLOR_BLACK, RGB( 0, 0, 0 )));
	colorTable.insert(std::make_pair(COLOR_BLUE, RGB( 0, 0, 255 )));
	colorTable.insert(std::make_pair(COLOR_BLUE_PIGMENT, RGB( 51, 51, 153 )));
	colorTable.insert(std::make_pair(COLOR_BLUE_RYB, RGB( 2, 71, 254 )));
	colorTable.insert(std::make_pair(COLOR_BLUE_GREEN, RGB( 0, 223, 223 )));
	colorTable.insert(std::make_pair(COLOR_BLUE_VIOLET, RGB( 138, 43, 226 )));
	colorTable.insert(std::make_pair(COLOR_BONDI_BLUE, RGB( 0, 149, 182 )));
	colorTable.insert(std::make_pair(COLOR_BRASS, RGB( 181, 166, 66 )));
	colorTable.insert(std::make_pair(COLOR_BRIGHT_GREEN, RGB( 102, 255, 0 )));
	colorTable.insert(std::make_pair(COLOR_BRIGHT_PINK, RGB( 255, 0, 127 )));
	colorTable.insert(std::make_pair(COLOR_BRIGHT_TURQUOISE, RGB( 8, 232, 222 )));
	colorTable.insert(std::make_pair(COLOR_BRILLIANT_ROSE, RGB( 255, 85, 163 )));
	colorTable.insert(std::make_pair(COLOR_BRINK_PINK, RGB( 251, 96, 127 )));
	colorTable.insert(std::make_pair(COLOR_BRONZE, RGB( 205, 127, 50 )));
	colorTable.insert(std::make_pair(COLOR_BROWN, RGB( 150, 75, 0 )));
	colorTable.insert(std::make_pair(COLOR_BUFF, RGB( 240, 220, 130 )));
	colorTable.insert(std::make_pair(COLOR_BURGUNDY, RGB( 128, 0, 32 )));
	colorTable.insert(std::make_pair(COLOR_BURNT_ORANGE, RGB( 204, 85, 0 )));
	colorTable.insert(std::make_pair(COLOR_BURNT_SIENNA, RGB( 233, 116, 81 )));
	colorTable.insert(std::make_pair(COLOR_BURNT_UMBER, RGB( 138, 51, 36 )));
	colorTable.insert(std::make_pair(COLOR_CAMOUFLAGE_GREEN, RGB( 120, 134, 107 )));
	colorTable.insert(std::make_pair(COLOR_CAPUT_MORTUUM, RGB( 89, 39, 32 )));
	colorTable.insert(std::make_pair(COLOR_CARDINAL, RGB( 196, 30, 58 )));
	colorTable.insert(std::make_pair(COLOR_CARMINE, RGB( 150, 0, 24 )));
	colorTable.insert(std::make_pair(COLOR_CARMINE_PINK, RGB( 235, 76, 66 )));
	colorTable.insert(std::make_pair(COLOR_CARNATION_PINK, RGB( 255, 166, 201 )));
	colorTable.insert(std::make_pair(COLOR_CAROLINA_BLUE, RGB( 156, 186, 227 )));
	colorTable.insert(std::make_pair(COLOR_CARROT_ORANGE, RGB( 237, 145, 33 )));
	colorTable.insert(std::make_pair(COLOR_CELADON, RGB( 172, 225, 175 )));
	colorTable.insert(std::make_pair(COLOR_CERISE, RGB( 222, 49, 99 )));
	colorTable.insert(std::make_pair(COLOR_CERISE_PINK, RGB( 236, 59, 131 )));
	colorTable.insert(std::make_pair(COLOR_CERULEAN, RGB( 0, 123, 167 )));
	colorTable.insert(std::make_pair(COLOR_CERULEAN_BLUE, RGB( 42, 82, 190 )));
	colorTable.insert(std::make_pair(COLOR_CHAMPAGNE, RGB( 247, 231, 206 )));
	colorTable.insert(std::make_pair(COLOR_CHARCOAL, RGB( 70, 70, 70 )));
	colorTable.insert(std::make_pair(COLOR_CHARTREUSE_TRADITIONAL, RGB( 223, 255, 0 )));
	colorTable.insert(std::make_pair(COLOR_CHARTREUSE_WEB, RGB( 127, 255, 0 )));
	colorTable.insert(std::make_pair(COLOR_CHERRY_BLOSSOM_PINK, RGB( 255, 183, 197 )));
	colorTable.insert(std::make_pair(COLOR_CHESTNUT, RGB( 205, 92, 92 )));
	colorTable.insert(std::make_pair(COLOR_CHOCOLATE, RGB( 123, 63, 0 )));
	colorTable.insert(std::make_pair(COLOR_CINNABAR, RGB( 227, 66, 52 )));
	colorTable.insert(std::make_pair(COLOR_CINNAMON, RGB( 210, 105, 30 )));
	colorTable.insert(std::make_pair(COLOR_COBALT, RGB( 0, 71, 171 )));
	colorTable.insert(std::make_pair(COLOR_COLUMBIA_BLUE, RGB( 155, 221, 255 )));
	colorTable.insert(std::make_pair(COLOR_COPPER, RGB( 184, 115, 51 )));
	colorTable.insert(std::make_pair(COLOR_COPPER_ROSE, RGB( 153, 102, 102 )));
	colorTable.insert(std::make_pair(COLOR_CORAL, RGB( 255, 127, 80 )));
	colorTable.insert(std::make_pair(COLOR_CORAL_PINK, RGB( 248, 131, 121 )));
	colorTable.insert(std::make_pair(COLOR_CORAL_RED, RGB( 255, 64, 64 )));
	colorTable.insert(std::make_pair(COLOR_CORN, RGB( 251, 236, 93 )));
	colorTable.insert(std::make_pair(COLOR_CORNFLOWER_BLUE, RGB( 100, 149, 237 )));
	colorTable.insert(std::make_pair(COLOR_COSMIC_LATTE, RGB( 255, 248, 231 )));
	colorTable.insert(std::make_pair(COLOR_CREAM, RGB( 255, 253, 208 )));
	colorTable.insert(std::make_pair(COLOR_CRIMSON, RGB( 220, 20, 60 )));
	colorTable.insert(std::make_pair(COLOR_CYAN, RGB( 0, 255, 255 )));
	colorTable.insert(std::make_pair(COLOR_CYAN_PROCESS, RGB( 0, 180, 247 )));
	colorTable.insert(std::make_pair(COLOR_DARK_BLUE, RGB( 0, 0, 139 )));
	colorTable.insert(std::make_pair(COLOR_DARK_BROWN, RGB( 101, 67, 33 )));
	colorTable.insert(std::make_pair(COLOR_DARK_CERULEAN, RGB( 8, 69, 126 )));
	colorTable.insert(std::make_pair(COLOR_DARK_CHESTNUT, RGB( 152, 105, 96 )));
	colorTable.insert(std::make_pair(COLOR_DARK_CORAL, RGB( 205, 91, 69 )));
	colorTable.insert(std::make_pair(COLOR_DARK_GOLDENROD, RGB( 184, 134, 11 )));
	colorTable.insert(std::make_pair(COLOR_DARK_GREEN, RGB( 1, 50, 32 )));
	colorTable.insert(std::make_pair(COLOR_DARK_KHAKI, RGB( 189, 183, 107 )));
	colorTable.insert(std::make_pair(COLOR_DARK_MAGENTA, RGB( 139, 0, 139 )));
	colorTable.insert(std::make_pair(COLOR_DARK_PASTEL_GREEN, RGB( 3, 192, 60 )));
	colorTable.insert(std::make_pair(COLOR_DARK_PINK, RGB( 231, 84, 128 )));
	colorTable.insert(std::make_pair(COLOR_DARK_SCARLET, RGB( 86, 3, 25 )));
	colorTable.insert(std::make_pair(COLOR_DARK_SALMON, RGB( 233, 150, 122 )));
	colorTable.insert(std::make_pair(COLOR_DARK_SLATE_GRAY, RGB( 47, 79, 79 )));
	colorTable.insert(std::make_pair(COLOR_DARK_SPRING_GREEN, RGB( 23, 114, 69 )));
	colorTable.insert(std::make_pair(COLOR_DARK_TAN, RGB( 145, 129, 81 )));
	colorTable.insert(std::make_pair(COLOR_DARK_TURQUOISE, RGB( 0, 206, 209 )));
	colorTable.insert(std::make_pair(COLOR_DARK_VIOLET, RGB( 148, 0, 211 )));
	colorTable.insert(std::make_pair(COLOR_DEEP_CARMINE_PINK, RGB( 239, 48, 56 )));
	colorTable.insert(std::make_pair(COLOR_DEEP_CERISE, RGB( 218, 50, 135 )));
	colorTable.insert(std::make_pair(COLOR_DEEP_CHESTNUT, RGB( 185, 78, 72 )));
	colorTable.insert(std::make_pair(COLOR_DEEP_FUCHSIA, RGB( 193, 84, 193 )));
	colorTable.insert(std::make_pair(COLOR_DEEP_LILAC, RGB( 153, 85, 187 )));
	colorTable.insert(std::make_pair(COLOR_DEEP_MAGENTA, RGB( 204, 0, 204 )));
	colorTable.insert(std::make_pair(COLOR_DEEP_PEACH, RGB( 255, 203, 164 )));
	colorTable.insert(std::make_pair(COLOR_DEEP_PINK, RGB( 255, 20, 147 )));
	colorTable.insert(std::make_pair(COLOR_DENIM, RGB( 21, 96, 189 )));
	colorTable.insert(std::make_pair(COLOR_DODGER_BLUE, RGB( 30, 144, 255 )));
	colorTable.insert(std::make_pair(COLOR_ECRU, RGB( 194, 178, 128 )));
	colorTable.insert(std::make_pair(COLOR_EGYPTIAN_BLUE, RGB( 16, 52, 166 )));
	colorTable.insert(std::make_pair(COLOR_ELECTRIC_BLUE, RGB( 125, 249, 255 )));
	colorTable.insert(std::make_pair(COLOR_ELECTRIC_GREEN_X11_GREEN, RGB( 0, 255, 0 )));
	colorTable.insert(std::make_pair(COLOR_ELECTRIC_INDIGO, RGB( 102, 0, 255 )));
	colorTable.insert(std::make_pair(COLOR_ELECTRIC_LIME, RGB( 204, 255, 0 )));
	colorTable.insert(std::make_pair(COLOR_ELECTRIC_PURPLE, RGB( 191, 0, 255 )));
	colorTable.insert(std::make_pair(COLOR_EMERALD, RGB( 80, 200, 120 )));
	colorTable.insert(std::make_pair(COLOR_EGGPLANT, RGB( 97, 64, 81 )));
	colorTable.insert(std::make_pair(COLOR_FALU_RED, RGB( 128, 24, 24 )));
	colorTable.insert(std::make_pair(COLOR_FERN_GREEN, RGB( 79, 121, 66 )));
	colorTable.insert(std::make_pair(COLOR_FIREBRICK, RGB( 178, 34, 34 )));
	colorTable.insert(std::make_pair(COLOR_FLAX, RGB( 238, 220, 130 )));
	colorTable.insert(std::make_pair(COLOR_FOREST_GREEN, RGB( 34, 139, 34 )));
	colorTable.insert(std::make_pair(COLOR_FRENCH_ROSE, RGB( 246, 74, 138 )));
	colorTable.insert(std::make_pair(COLOR_FUCHSIA, RGB( 255, 0, 255 )));
	colorTable.insert(std::make_pair(COLOR_FUCHSIA_PINK, RGB( 255, 119, 255 )));
	colorTable.insert(std::make_pair(COLOR_GAMBOGE, RGB( 228, 155, 15 )));
	colorTable.insert(std::make_pair(COLOR_GOLD_METALLIC, RGB( 212, 175, 55 )));
	colorTable.insert(std::make_pair(COLOR_GOLD_WEB_GOLDEN, RGB( 255, 215, 0 )));
	colorTable.insert(std::make_pair(COLOR_GOLDEN_BROWN, RGB( 153, 101, 21 )));
	colorTable.insert(std::make_pair(COLOR_GOLDEN_YELLOW, RGB( 255, 223, 0 )));
	colorTable.insert(std::make_pair(COLOR_GOLDENROD, RGB( 218, 165, 32 )));
	colorTable.insert(std::make_pair(COLOR_GREY_ASPARAGUS, RGB( 70, 89, 69 )));
	colorTable.insert(std::make_pair(COLOR_GREEN_COLOR_WHEEL_X11_GREEN, RGB( 0, 255, 0 )));
	colorTable.insert(std::make_pair(COLOR_GREEN_HTMLCSS_GREEN, RGB( 0, 128, 0 )));
	colorTable.insert(std::make_pair(COLOR_GREEN_PIGMENT, RGB( 0, 165, 80 )));
	colorTable.insert(std::make_pair(COLOR_GREEN_RYB, RGB( 102, 176, 50 )));
	colorTable.insert(std::make_pair(COLOR_GREEN_YELLOW, RGB( 173, 255, 47 )));
	colorTable.insert(std::make_pair(COLOR_GREY, RGB( 128, 128, 128 )));
	colorTable.insert(std::make_pair(COLOR_HAN_PURPLE, RGB( 82, 24, 250 )));
	colorTable.insert(std::make_pair(COLOR_HARLEQUIN, RGB( 63, 255, 0 )));
	colorTable.insert(std::make_pair(COLOR_HELIOTROPE, RGB( 223, 115, 255 )));
	colorTable.insert(std::make_pair(COLOR_HOLLYWOOD_CERISE, RGB( 244, 0, 161 )));
	colorTable.insert(std::make_pair(COLOR_HOT_MAGENTA, RGB( 255, 0, 204 )));
	colorTable.insert(std::make_pair(COLOR_HOT_PINK, RGB( 255, 105, 180 )));
	colorTable.insert(std::make_pair(COLOR_INDIGO_DYE, RGB( 0, 65, 106 )));
	colorTable.insert(std::make_pair(COLOR_INDIGO_WEB, RGB( 75, 0, 130 )));
	colorTable.insert(std::make_pair(COLOR_INTERNATIONAL_KLEIN_BLUE, RGB( 0, 47, 167 )));
	colorTable.insert(std::make_pair(COLOR_INTERNATIONAL_ORANGE, RGB( 255, 79, 0 )));
	colorTable.insert(std::make_pair(COLOR_ISLAMIC_GREEN, RGB( 0, 153, 0 )));
	colorTable.insert(std::make_pair(COLOR_IVORY, RGB( 255, 255, 240 )));
	colorTable.insert(std::make_pair(COLOR_JADE, RGB( 0, 168, 107 )));
	colorTable.insert(std::make_pair(COLOR_KELLY_GREEN, RGB( 76, 187, 23 )));
	colorTable.insert(std::make_pair(COLOR_KHAKI, RGB( 195, 176, 145 )));
	colorTable.insert(std::make_pair(COLOR_KHAKI_X11_LIGHT_KHAKI, RGB( 240, 230, 140 )));
	colorTable.insert(std::make_pair(COLOR_LAVENDER_FLORAL, RGB( 181, 126, 220 )));
	colorTable.insert(std::make_pair(COLOR_LAVENDER_WEB, RGB( 230, 230, 250 )));
	colorTable.insert(std::make_pair(COLOR_LAVENDER_BLUE, RGB( 204, 204, 255 )));
	colorTable.insert(std::make_pair(COLOR_LAVENDER_BLUSH, RGB( 255, 240, 245 )));
	colorTable.insert(std::make_pair(COLOR_LAVENDER_GREY, RGB( 196, 195, 221 )));
	colorTable.insert(std::make_pair(COLOR_LAVENDER_MAGENTA, RGB( 238, 130, 238 )));
	colorTable.insert(std::make_pair(COLOR_LAVENDER_PINK, RGB( 251, 174, 210 )));
	colorTable.insert(std::make_pair(COLOR_LAVENDER_PURPLE, RGB( 150, 120, 182 )));
	colorTable.insert(std::make_pair(COLOR_LAVENDER_ROSE, RGB( 251, 160, 227 )));
	colorTable.insert(std::make_pair(COLOR_LAWN_GREEN, RGB( 124, 252, 0 )));
	colorTable.insert(std::make_pair(COLOR_LEMON, RGB( 253, 233, 16 )));
	colorTable.insert(std::make_pair(COLOR_LEMON_CHIFFON, RGB( 255, 250, 205 )));
	colorTable.insert(std::make_pair(COLOR_LIGHT_BLUE, RGB( 173, 216, 230 )));
	colorTable.insert(std::make_pair(COLOR_LIGHT_PINK, RGB( 255, 182, 193 )));
	colorTable.insert(std::make_pair(COLOR_LILAC, RGB( 200, 162, 200 )));
	colorTable.insert(std::make_pair(COLOR_LIME_COLOR_WHEEL, RGB( 191, 255, 0 )));
	colorTable.insert(std::make_pair(COLOR_LIME_WEB_X11_GREEN, RGB( 0, 255, 0 )));
	colorTable.insert(std::make_pair(COLOR_LIME_GREEN, RGB( 50, 205, 50 )));
	colorTable.insert(std::make_pair(COLOR_LINEN, RGB( 250, 240, 230 )));
	colorTable.insert(std::make_pair(COLOR_MAGENTA, RGB( 255, 0, 255 )));
	colorTable.insert(std::make_pair(COLOR_MAGENTA_DYE, RGB( 202, 31, 23 )));
	colorTable.insert(std::make_pair(COLOR_MAGENTA_PROCESS, RGB( 255, 0, 144 )));
	colorTable.insert(std::make_pair(COLOR_MAGIC_MINT, RGB( 170, 240, 209 )));
	colorTable.insert(std::make_pair(COLOR_MAGNOLIA, RGB( 248, 244, 255 )));
	colorTable.insert(std::make_pair(COLOR_MALACHITE, RGB( 11, 218, 81 )));
	colorTable.insert(std::make_pair(COLOR_MAROON_HTMLCSS, RGB( 128, 0, 0 )));
	colorTable.insert(std::make_pair(COLOR_MAROON_X11, RGB( 176, 48, 96 )));
	colorTable.insert(std::make_pair(COLOR_MAYA_BLUE, RGB( 115, 194, 251 )));
	colorTable.insert(std::make_pair(COLOR_MAUVE, RGB( 224, 176, 255 )));
	colorTable.insert(std::make_pair(COLOR_MAUVE_TAUPE, RGB( 145, 95, 109 )));
	colorTable.insert(std::make_pair(COLOR_MEDIUM_BLUE, RGB( 0, 0, 205 )));
	colorTable.insert(std::make_pair(COLOR_MEDIUM_CARMINE, RGB( 175, 64, 53 )));
	colorTable.insert(std::make_pair(COLOR_MEDIUM_LAVENDER_MAGENTA, RGB( 204, 153, 204 )));
	colorTable.insert(std::make_pair(COLOR_MEDIUM_PURPLE, RGB( 147, 112, 219 )));
	colorTable.insert(std::make_pair(COLOR_MEDIUM_SPRING_GREEN, RGB( 0, 250, 154 )));
	colorTable.insert(std::make_pair(COLOR_MIDNIGHT_BLUE, RGB( 25, 25, 112 )));
	colorTable.insert(std::make_pair(COLOR_MIDNIGHT_GREEN_EAGLE_GREEN, RGB( 0, 73, 83 )));
	colorTable.insert(std::make_pair(COLOR_MINT_GREEN, RGB( 152, 255, 152 )));
	colorTable.insert(std::make_pair(COLOR_MISTY_ROSE, RGB( 255, 228, 225 )));
	colorTable.insert(std::make_pair(COLOR_MOSS_GREEN, RGB( 173, 223, 173 )));
	colorTable.insert(std::make_pair(COLOR_MOUNTBATTEN_PINK, RGB( 153, 122, 141 )));
	colorTable.insert(std::make_pair(COLOR_MUSTARD, RGB( 255, 219, 88 )));
	colorTable.insert(std::make_pair(COLOR_MYRTLE, RGB( 33, 66, 30 )));
	colorTable.insert(std::make_pair(COLOR_NAVAJO_WHITE, RGB( 255, 222, 173 )));
	colorTable.insert(std::make_pair(COLOR_NAVY_BLUE, RGB( 0, 0, 128 )));
	colorTable.insert(std::make_pair(COLOR_OCHRE, RGB( 204, 119, 34 )));
	colorTable.insert(std::make_pair(COLOR_OFFICE_GREEN, RGB( 0, 128, 0 )));
	colorTable.insert(std::make_pair(COLOR_OLD_GOLD, RGB( 207, 181, 59 )));
	colorTable.insert(std::make_pair(COLOR_OLD_LACE, RGB( 253, 245, 230 )));
	colorTable.insert(std::make_pair(COLOR_OLD_LAVENDER, RGB( 121, 104, 120 )));
	colorTable.insert(std::make_pair(COLOR_OLD_ROSE, RGB( 192, 128, 129 )));
	colorTable.insert(std::make_pair(COLOR_OLIVE, RGB( 128, 128, 0 )));
	colorTable.insert(std::make_pair(COLOR_OLIVE_DRAB, RGB( 107, 142, 35 )));
	colorTable.insert(std::make_pair(COLOR_OLIVINE, RGB( 154, 185, 115 )));
	colorTable.insert(std::make_pair(COLOR_ORANGE_COLOR_WHEEL, RGB( 255, 127, 0 )));
	colorTable.insert(std::make_pair(COLOR_ORANGE_RYB, RGB( 251, 153, 2 )));
	colorTable.insert(std::make_pair(COLOR_ORANGE_WEB, RGB( 255, 165, 0 )));
	colorTable.insert(std::make_pair(COLOR_ORANGE_PEEL, RGB( 255, 160, 0 )));	  
	colorTable.insert(std::make_pair(COLOR_ORANGE_RED, RGB( 255, 69, 0 )));	  
	colorTable.insert(std::make_pair(COLOR_ORCHID, RGB( 218, 112, 214 )));	  	  
	colorTable.insert(std::make_pair(COLOR_PALE_BLUE, RGB( 175, 238, 238 )));	  
	colorTable.insert(std::make_pair(COLOR_PALE_BROWN, RGB( 152, 118, 84 )));	  
	colorTable.insert(std::make_pair(COLOR_PALE_CARMINE, RGB( 175, 64, 53 )));	  
	colorTable.insert(std::make_pair(COLOR_PALE_CHESTNUT, RGB( 221, 173, 175 )));	  
	colorTable.insert(std::make_pair(COLOR_PALE_CORNFLOWER_BLUE, RGB( 171, 205, 239 )));	  
	colorTable.insert(std::make_pair(COLOR_PALE_MAGENTA, RGB( 249, 132, 229 )));	  
	colorTable.insert(std::make_pair(COLOR_PALE_PINK, RGB( 250, 218, 221 )));	  
	colorTable.insert(std::make_pair(COLOR_PALE_RED_VIOLET, RGB( 219, 112, 147 )));	  
	colorTable.insert(std::make_pair(COLOR_PAPAYA_WHIP, RGB( 255, 239, 213 )));	  
	colorTable.insert(std::make_pair(COLOR_PASTEL_GREEN, RGB( 119, 221, 119 )));	  
	colorTable.insert(std::make_pair(COLOR_PASTEL_PINK, RGB( 255, 209, 220 )));	  
	colorTable.insert(std::make_pair(COLOR_PEACH, RGB( 255, 229, 180 )));	  
	colorTable.insert(std::make_pair(COLOR_PEACH_ORANGE, RGB( 255, 204, 153 )));	  
	colorTable.insert(std::make_pair(COLOR_PEACH_YELLOW, RGB( 250, 223, 173 )));	  
	colorTable.insert(std::make_pair(COLOR_PEAR, RGB( 209, 226, 49 )));	  
	colorTable.insert(std::make_pair(COLOR_PERIWINKLE, RGB( 204, 204, 255 )));	  
	colorTable.insert(std::make_pair(COLOR_PERSIAN_BLUE, RGB( 28, 57, 187 )));	  
	colorTable.insert(std::make_pair(COLOR_PERSIAN_GREEN, RGB( 0, 166, 147 )));	  
	colorTable.insert(std::make_pair(COLOR_PERSIAN_INDIGO, RGB( 50, 18, 122 )));	  
	colorTable.insert(std::make_pair(COLOR_PERSIAN_ORANGE, RGB( 217, 144, 88 )));	  
	colorTable.insert(std::make_pair(COLOR_PERSIAN_RED, RGB( 204, 51, 51 )));	  
	colorTable.insert(std::make_pair(COLOR_PERSIAN_PINK, RGB( 247, 127, 190 )));	  
	colorTable.insert(std::make_pair(COLOR_PERSIAN_ROSE, RGB( 254, 40, 162 )));	  
	colorTable.insert(std::make_pair(COLOR_PERSIMMON, RGB( 236, 88, 0 )));	  
	colorTable.insert(std::make_pair(COLOR_PINE_GREEN, RGB( 1, 121, 111 )));	  
	colorTable.insert(std::make_pair(COLOR_PINK, RGB( 255, 192, 203 )));	  
	colorTable.insert(std::make_pair(COLOR_PINK_ORANGE, RGB( 255, 153, 102 )));	  
	colorTable.insert(std::make_pair(COLOR_PLATINUM, RGB( 229, 228, 226 )));	  
	colorTable.insert(std::make_pair(COLOR_PLUM_WEB, RGB( 204, 153, 204 )));	  
	colorTable.insert(std::make_pair(COLOR_POWDER_BLUE_WEB, RGB( 176, 224, 230 )));	  
	colorTable.insert(std::make_pair(COLOR_PUCE, RGB( 204, 136, 153 )));	  
	colorTable.insert(std::make_pair(COLOR_PRUSSIAN_BLUE, RGB( 0, 49, 83 )));	  
	colorTable.insert(std::make_pair(COLOR_PSYCHEDELIC_PURPLE, RGB( 221, 0, 255 )));	  
	colorTable.insert(std::make_pair(COLOR_PUMPKIN, RGB( 255, 117, 24 )));	  
	colorTable.insert(std::make_pair(COLOR_PURPLE_HTMLCSS, RGB( 128, 0, 128 )));	  
	colorTable.insert(std::make_pair(COLOR_PURPLE_X11, RGB( 160, 92, 240 )));	  
	colorTable.insert(std::make_pair(COLOR_PURPLE_TAUPE, RGB( 80, 64, 77 )));	  
	colorTable.insert(std::make_pair(COLOR_RAW_UMBER, RGB( 115, 74, 18 )));	  
	colorTable.insert(std::make_pair(COLOR_RAZZMATAZZ, RGB( 227, 11, 92 )));	  
	colorTable.insert(std::make_pair(COLOR_RED, RGB( 255, 0, 0 )));	  
	colorTable.insert(std::make_pair(COLOR_RED_PIGMENT, RGB( 237, 28, 36 )));	  
	colorTable.insert(std::make_pair(COLOR_RED_RYB, RGB( 254, 39, 18 )));	  
	colorTable.insert(std::make_pair(COLOR_RED_VIOLET, RGB( 199, 21, 133 )));	  
	colorTable.insert(std::make_pair(COLOR_RICH_CARMINE, RGB( 215, 0, 64 )));	  
	colorTable.insert(std::make_pair(COLOR_ROBIN_EGG_BLUE, RGB( 0, 204, 204 )));	  
	colorTable.insert(std::make_pair(COLOR_ROSE, RGB( 255, 0, 127 )));	  
	colorTable.insert(std::make_pair(COLOR_ROSE_MADDER, RGB( 227, 38, 54 )));	  
	colorTable.insert(std::make_pair(COLOR_ROSE_TAUPE, RGB( 144, 93, 93 )));	  
	colorTable.insert(std::make_pair(COLOR_ROYAL_BLUE, RGB( 65, 105, 225 )));
	colorTable.insert(std::make_pair(COLOR_ROYAL_PURPLE, RGB( 107, 63, 160 )));
	colorTable.insert(std::make_pair(COLOR_RUBY, RGB( 224, 17, 95 )));
	colorTable.insert(std::make_pair(COLOR_RUSSET, RGB( 128, 70, 27 )));	  
	colorTable.insert(std::make_pair(COLOR_RUST, RGB( 183, 65, 14 )));	  
	colorTable.insert(std::make_pair(COLOR_SAFETY_ORANGE_BLAZE_ORANGE, RGB( 255, 102, 0 )));	  
	colorTable.insert(std::make_pair(COLOR_SAFFRON, RGB( 244, 196, 48 )));	  
	colorTable.insert(std::make_pair(COLOR_SALMON, RGB( 255, 140, 105 )));	  
	colorTable.insert(std::make_pair(COLOR_SANDY_BROWN, RGB( 244, 164, 96 )));	  
	colorTable.insert(std::make_pair(COLOR_SANGRIA, RGB( 146, 0, 10 )));	  
	colorTable.insert(std::make_pair(COLOR_SAPPHIRE, RGB( 8, 37, 103 )));	  
	colorTable.insert(std::make_pair(COLOR_SCARLET, RGB( 255, 36, 0 )));	  
	colorTable.insert(std::make_pair(COLOR_SCHOOL_BUS_YELLOW, RGB( 255, 216, 0 )));	  
	colorTable.insert(std::make_pair(COLOR_SEA_GREEN, RGB( 46, 139, 87 )));	  
	colorTable.insert(std::make_pair(COLOR_SEASHELL, RGB( 255, 245, 238 )));	  
	colorTable.insert(std::make_pair(COLOR_SELECTIVE_YELLOW, RGB( 255, 186, 0 )));	  
	colorTable.insert(std::make_pair(COLOR_SEPIA, RGB( 112, 66, 20 )));	  
	colorTable.insert(std::make_pair(COLOR_SHAMROCK_GREEN, RGB( 0, 158, 96 )));	  
	colorTable.insert(std::make_pair(COLOR_SHOCKING_PINK, RGB( 252, 15, 192 )));	  
	colorTable.insert(std::make_pair(COLOR_SILVER, RGB( 192, 192, 192 )));	  
	colorTable.insert(std::make_pair(COLOR_SKY_BLUE, RGB( 135, 206, 235 )));	  
	colorTable.insert(std::make_pair(COLOR_SLATE_GREY, RGB( 112, 128, 144 )));	  
	colorTable.insert(std::make_pair(COLOR_SMALT_DARK_POWDER_BLUE, RGB( 0, 51, 153 )));	  
	colorTable.insert(std::make_pair(COLOR_SPRING_BUD, RGB( 167, 252, 0 )));	  
	colorTable.insert(std::make_pair(COLOR_SPRING_GREEN, RGB( 0, 255, 127 )));	  
	colorTable.insert(std::make_pair(COLOR_STEEL_BLUE, RGB( 70, 130, 180 )));	  
	colorTable.insert(std::make_pair(COLOR_TAN, RGB( 210, 180, 140 )));	  
	colorTable.insert(std::make_pair(COLOR_TANGERINE, RGB( 242, 133, 0 )));	  
	colorTable.insert(std::make_pair(COLOR_TANGERINE_YELLOW, RGB( 255, 204, 0 )));	  
	colorTable.insert(std::make_pair(COLOR_TAUPE, RGB( 72, 60, 50 )));	  
	colorTable.insert(std::make_pair(COLOR_TEA_GREEN, RGB( 208, 240, 192 )));	  
	colorTable.insert(std::make_pair(COLOR_TEA_ROSE_ORANGE, RGB( 248, 131, 194 )));	  
	colorTable.insert(std::make_pair(COLOR_TEA_ROSE_ROSE, RGB( 244, 194, 194 )));	  
	colorTable.insert(std::make_pair(COLOR_TEAL, RGB( 0, 128, 128 )));	  
	colorTable.insert(std::make_pair(COLOR_TENNY_TAWNY, RGB( 205, 87, 0 )));	  
	colorTable.insert(std::make_pair(COLOR_TERRA_COTTA, RGB( 226, 114, 91 )));	  
	colorTable.insert(std::make_pair(COLOR_THISTLE, RGB( 216, 191, 216 )));	  
	colorTable.insert(std::make_pair(COLOR_TOMATO, RGB( 255, 99, 71 )));	  
	colorTable.insert(std::make_pair(COLOR_TURQUOISE, RGB( 48, 213, 200 )));	  
	colorTable.insert(std::make_pair(COLOR_TYRIAN_PURPLE, RGB( 102, 2, 60 )));	  
	colorTable.insert(std::make_pair(COLOR_ULTRAMARINE, RGB( 18 , 10 , 143 )));	  
	colorTable.insert(std::make_pair(COLOR_ULTRA_PINK, RGB( 255, 111, 255 )));	  
	colorTable.insert(std::make_pair(COLOR_UNITED_NATIONS_BLUE, RGB( 91, 146, 229 )));	  
	colorTable.insert(std::make_pair(COLOR_VEGAS_GOLD, RGB( 197, 179, 88 )));	  
	colorTable.insert(std::make_pair(COLOR_VERMILION, RGB( 227, 66, 51 )));	  
	colorTable.insert(std::make_pair(COLOR_VIOLET, RGB( 139, 0, 255 )));	  
	colorTable.insert(std::make_pair(COLOR_VIOLET_WEB, RGB( 238, 130, 238 )));	  
	colorTable.insert(std::make_pair(COLOR_VIOLET_RYB, RGB( 2, 71, 54 )));	  
	colorTable.insert(std::make_pair(COLOR_VIRIDIAN, RGB( 64, 130, 109 )));	  
	colorTable.insert(std::make_pair(COLOR_WHEAT, RGB( 245, 222, 179 )));
	colorTable.insert(std::make_pair(COLOR_WHITE, RGB( 255, 255, 255 )));
	colorTable.insert(std::make_pair(COLOR_WISTERIA, RGB( 201, 160, 220 )));
	colorTable.insert(std::make_pair(COLOR_YELLOW, RGB( 255, 255, 0 )));
	colorTable.insert(std::make_pair(COLOR_YELLOW_PROCESS, RGB( 255, 239, 0 )));
	colorTable.insert(std::make_pair(COLOR_YELLOW_RYB, RGB( 254, 254, 51 )));
	colorTable.insert(std::make_pair(COLOR_YELLOW_GREEN, RGB( 154, 205, 50 )));
	
	locationTable.push_back(LOCATIONURIBASE + LOC_X_LEFT + LOC_Y_BOTTOM + LOC_Z_BACK);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_LEFT + LOC_Y_BOTTOM + LOC_Z_MIDWAY);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_LEFT + LOC_Y_BOTTOM + LOC_Z_FRONT);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_LEFT + LOC_Y_MIDDLE + LOC_Z_BACK);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_LEFT + LOC_Y_MIDDLE + LOC_Z_MIDWAY);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_LEFT + LOC_Y_MIDDLE + LOC_Z_FRONT);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_LEFT + LOC_Y_TOP + LOC_Z_BACK);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_LEFT + LOC_Y_TOP + LOC_Z_MIDWAY);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_LEFT + LOC_Y_TOP + LOC_Z_FRONT);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_LEFT + LOC_EVERYWHERE + LOC_Z_BACK);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_LEFT + LOC_EVERYWHERE + LOC_Z_MIDWAY);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_LEFT + LOC_EVERYWHERE + LOC_Z_FRONT);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_LEFT + LOC_Y_BOTTOM + LOC_EVERYWHERE);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_LEFT + LOC_Y_MIDDLE + LOC_EVERYWHERE);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_LEFT + LOC_Y_TOP + LOC_EVERYWHERE);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_LEFT + LOC_EVERYWHERE + LOC_EVERYWHERE);
	
	// x centerleft
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTERLEFT + LOC_Y_BOTTOM + LOC_Z_BACK);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTERLEFT + LOC_Y_BOTTOM + LOC_Z_MIDWAY);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTERLEFT + LOC_Y_BOTTOM + LOC_Z_FRONT);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTERLEFT + LOC_Y_MIDDLE + LOC_Z_BACK);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTERLEFT + LOC_Y_MIDDLE + LOC_Z_MIDWAY);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTERLEFT + LOC_Y_MIDDLE + LOC_Z_FRONT);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTERLEFT + LOC_Y_TOP + LOC_Z_BACK);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTERLEFT + LOC_Y_TOP + LOC_Z_MIDWAY);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTERLEFT + LOC_Y_TOP + LOC_Z_FRONT);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTERLEFT + LOC_EVERYWHERE + LOC_Z_BACK);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTERLEFT + LOC_EVERYWHERE + LOC_Z_MIDWAY);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTERLEFT + LOC_EVERYWHERE + LOC_Z_FRONT);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTERLEFT + LOC_Y_BOTTOM + LOC_EVERYWHERE);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTERLEFT + LOC_Y_MIDDLE + LOC_EVERYWHERE);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTERLEFT + LOC_Y_TOP + LOC_EVERYWHERE);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTERLEFT + LOC_EVERYWHERE + LOC_EVERYWHERE);

	// x center
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTER + LOC_Y_BOTTOM + LOC_Z_BACK);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTER + LOC_Y_BOTTOM + LOC_Z_MIDWAY);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTER + LOC_Y_BOTTOM + LOC_Z_FRONT);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTER + LOC_Y_MIDDLE + LOC_Z_BACK);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTER + LOC_Y_MIDDLE + LOC_Z_MIDWAY);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTER + LOC_Y_MIDDLE + LOC_Z_FRONT);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTER + LOC_Y_TOP + LOC_Z_BACK);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTER + LOC_Y_TOP + LOC_Z_MIDWAY);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTER + LOC_Y_TOP + LOC_Z_FRONT);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTER + LOC_EVERYWHERE + LOC_Z_BACK);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTER + LOC_EVERYWHERE + LOC_Z_MIDWAY);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTER + LOC_EVERYWHERE + LOC_Z_FRONT);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTER + LOC_Y_BOTTOM + LOC_EVERYWHERE);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTER + LOC_Y_MIDDLE + LOC_EVERYWHERE);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTER + LOC_Y_TOP + LOC_EVERYWHERE);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTER + LOC_EVERYWHERE + LOC_EVERYWHERE);
	
	// x centerright
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTERRIGHT + LOC_Y_BOTTOM + LOC_Z_BACK);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTERRIGHT + LOC_Y_BOTTOM + LOC_Z_MIDWAY);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTERRIGHT + LOC_Y_BOTTOM + LOC_Z_FRONT);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTERRIGHT + LOC_Y_MIDDLE + LOC_Z_BACK);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTERRIGHT + LOC_Y_MIDDLE + LOC_Z_MIDWAY);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTERRIGHT + LOC_Y_MIDDLE + LOC_Z_FRONT);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTERRIGHT + LOC_Y_TOP + LOC_Z_BACK);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTERRIGHT + LOC_Y_TOP + LOC_Z_MIDWAY);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTERRIGHT + LOC_Y_TOP + LOC_Z_FRONT);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTERRIGHT + LOC_EVERYWHERE + LOC_Z_BACK);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTERRIGHT + LOC_EVERYWHERE + LOC_Z_MIDWAY);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTERRIGHT + LOC_EVERYWHERE + LOC_Z_FRONT);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTERRIGHT + LOC_Y_BOTTOM + LOC_EVERYWHERE);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTERRIGHT + LOC_Y_MIDDLE + LOC_EVERYWHERE);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTERRIGHT + LOC_Y_TOP + LOC_EVERYWHERE);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_CENTERRIGHT + LOC_EVERYWHERE + LOC_EVERYWHERE);
	
	// x right
	locationTable.push_back(LOCATIONURIBASE + LOC_X_RIGHT + LOC_Y_BOTTOM + LOC_Z_BACK);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_RIGHT + LOC_Y_BOTTOM + LOC_Z_MIDWAY);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_RIGHT + LOC_Y_BOTTOM + LOC_Z_FRONT);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_RIGHT + LOC_Y_MIDDLE + LOC_Z_BACK);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_RIGHT + LOC_Y_MIDDLE + LOC_Z_MIDWAY);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_RIGHT + LOC_Y_MIDDLE + LOC_Z_FRONT);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_RIGHT + LOC_Y_TOP + LOC_Z_BACK);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_RIGHT + LOC_Y_TOP + LOC_Z_MIDWAY);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_RIGHT + LOC_Y_TOP + LOC_Z_FRONT);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_RIGHT + LOC_EVERYWHERE + LOC_Z_BACK);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_RIGHT + LOC_EVERYWHERE + LOC_Z_MIDWAY);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_RIGHT + LOC_EVERYWHERE + LOC_Z_FRONT);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_RIGHT + LOC_Y_BOTTOM + LOC_EVERYWHERE);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_RIGHT + LOC_Y_MIDDLE + LOC_EVERYWHERE);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_RIGHT + LOC_Y_TOP + LOC_EVERYWHERE);
	locationTable.push_back(LOCATIONURIBASE + LOC_X_RIGHT + LOC_EVERYWHERE + LOC_EVERYWHERE);
	
	// x everywhere
	locationTable.push_back(LOCATIONURIBASE + LOC_EVERYWHERE + LOC_Y_BOTTOM + LOC_Z_BACK);
	locationTable.push_back(LOCATIONURIBASE + LOC_EVERYWHERE + LOC_Y_BOTTOM + LOC_Z_MIDWAY);
	locationTable.push_back(LOCATIONURIBASE + LOC_EVERYWHERE + LOC_Y_BOTTOM + LOC_Z_FRONT);
	locationTable.push_back(LOCATIONURIBASE + LOC_EVERYWHERE + LOC_Y_MIDDLE + LOC_Z_BACK);
	locationTable.push_back(LOCATIONURIBASE + LOC_EVERYWHERE + LOC_Y_MIDDLE + LOC_Z_MIDWAY);
	locationTable.push_back(LOCATIONURIBASE + LOC_EVERYWHERE + LOC_Y_MIDDLE + LOC_Z_FRONT);
	locationTable.push_back(LOCATIONURIBASE + LOC_EVERYWHERE + LOC_Y_TOP + LOC_Z_BACK);
	locationTable.push_back(LOCATIONURIBASE + LOC_EVERYWHERE + LOC_Y_TOP + LOC_Z_MIDWAY);
	locationTable.push_back(LOCATIONURIBASE + LOC_EVERYWHERE + LOC_Y_TOP + LOC_Z_FRONT);
	locationTable.push_back(LOCATIONURIBASE + LOC_EVERYWHERE + LOC_EVERYWHERE + LOC_Z_BACK);
	locationTable.push_back(LOCATIONURIBASE + LOC_EVERYWHERE + LOC_EVERYWHERE + LOC_Z_MIDWAY);
	locationTable.push_back(LOCATIONURIBASE + LOC_EVERYWHERE + LOC_EVERYWHERE + LOC_Z_FRONT);
	locationTable.push_back(LOCATIONURIBASE + LOC_EVERYWHERE + LOC_Y_BOTTOM + LOC_EVERYWHERE);
	locationTable.push_back(LOCATIONURIBASE + LOC_EVERYWHERE + LOC_Y_MIDDLE + LOC_EVERYWHERE);
	locationTable.push_back(LOCATIONURIBASE + LOC_EVERYWHERE + LOC_Y_TOP + LOC_EVERYWHERE);
	locationTable.push_back(LOCATIONURIBASE + LOC_EVERYWHERE + LOC_EVERYWHERE + LOC_EVERYWHERE);
	
	scentTable.push_back(SCENT_ROSE);
	scentTable.push_back(SCENT_ACACIA);
	scentTable.push_back(SCENT_CHRYSANTHEMUM);
	scentTable.push_back(SCENT_LILAC);
	scentTable.push_back(SCENT_MINT);
	scentTable.push_back(SCENT_JASMINE);
	scentTable.push_back(SCENT_PINETREE);
	scentTable.push_back(SCENT_ORANGE);
	scentTable.push_back(SCENT_GRAPE);
	scentTable.push_back(SCENT_ALMONDS);
	scentTable.push_back(SCENT_AMARETTO);
	scentTable.push_back(SCENT_APPLES_GREEN);
	scentTable.push_back(SCENT_APPLES_RED);
	scentTable.push_back(SCENT_BACON);
	scentTable.push_back(SCENT_BACON_SMOKEY);
	scentTable.push_back(SCENT_BANANA);
	scentTable.push_back(SCENT_BANANA_SPLITS);
	scentTable.push_back(SCENT_BASIL_HERD);
	scentTable.push_back(SCENT_BEEF);
	scentTable.push_back(SCENT_BLACKCURRANT);
	scentTable.push_back(SCENT_BOILED_CABBAGE);
	scentTable.push_back(SCENT_BRANDY);
	scentTable.push_back(SCENT_BREAD);
	scentTable.push_back(SCENT_BUBBLE_GUM);
	scentTable.push_back(SCENT_CAKE_SHOP);
	scentTable.push_back(SCENT_CANDY_FLOSS);
	scentTable.push_back(SCENT_CARAMEL_TOFFEE);
	scentTable.push_back(SCENT_CARROT);
	scentTable.push_back(SCENT_CELERY);
	scentTable.push_back(SCENT_CHERRY);
	scentTable.push_back(SCENT_CHICKEN);
	scentTable.push_back(SCENT_COCONUT);
	scentTable.push_back(SCENT_CHOCOLATE_DARK);
	scentTable.push_back(SCENT_CHOCOLATE_ORANGE);
	scentTable.push_back(SCENT_CHRISTMAS_APPLE);
	scentTable.push_back(SCENT_CHRISTMAS_PUDDING);
	scentTable.push_back(SCENT_CINNAMON);
	scentTable.push_back(SCENT_COFFEE_CHOCOLATE);
	scentTable.push_back(SCENT_COFFEE_CREAM);
	scentTable.push_back(SCENT_COLA);
	scentTable.push_back(SCENT_CONFECTIONARY);
	scentTable.push_back(SCENT_COOKIE);
	scentTable.push_back(SCENT_CORIANDER);
	scentTable.push_back(SCENT_CRUSTY_BREAD);
	scentTable.push_back(SCENT_CURRY);
	scentTable.push_back(SCENT_FISHMARKET);
	scentTable.push_back(SCENT_FRUIT_CAKE);
	scentTable.push_back(SCENT_FRUIT_PUNCH_BR_FRUITY_SWEETS);
	scentTable.push_back(SCENT_GARDEN_MINT);
	scentTable.push_back(SCENT_GARLIC);
	scentTable.push_back(SCENT_GINGERBREAD);
	scentTable.push_back(SCENT_GRANNIES_KITCHEN);
	scentTable.push_back(SCENT_GRAPEFRUIT);
	scentTable.push_back(SCENT_HERBS_MIXED);
	scentTable.push_back(SCENT_HERRING);
	scentTable.push_back(SCENT_HONEY);
	scentTable.push_back(SCENT_HOT_APPLE_PIE);
	scentTable.push_back(SCENT_IRISH_CREAM);
	scentTable.push_back(SCENT_JAMBALAYA);
	scentTable.push_back(SCENT_JELLY_BABIES);
	scentTable.push_back(SCENT_KIWI_FRUIT);
	scentTable.push_back(SCENT_LIME_SPLASH);
	scentTable.push_back(SCENT_LIQUORICE);
	scentTable.push_back(SCENT_MANGO_DELIGHT);
	scentTable.push_back(SCENT_MELON);
	scentTable.push_back(SCENT_MINT_CHOCOLATE);
	scentTable.push_back(SCENT_MULLED_WINE);
	scentTable.push_back(SCENT_NUTMEG);
	scentTable.push_back(SCENT_ONION);
	scentTable.push_back(SCENT_ORANGE_CUPCAKE);
	scentTable.push_back(SCENT_ORANGE_NF);
	scentTable.push_back(SCENT_PASSION_FRUIT);
	scentTable.push_back(SCENT_PEACH_FLESH);
	scentTable.push_back(SCENT_PEAR_DROPS);
	scentTable.push_back(SCENT_PEPPERMINT);
	scentTable.push_back(SCENT_PINA_COLADA);
	scentTable.push_back(SCENT_PINEAPPLE);
	scentTable.push_back(SCENT_POPCORN);
	scentTable.push_back(SCENT_RASPBERRY);
	scentTable.push_back(SCENT_RASPBERRY_RIPPLES);
	scentTable.push_back(SCENT_RHUBARB);
	scentTable.push_back(SCENT_ROSEMARY);
	scentTable.push_back(SCENT_RUM);
	scentTable.push_back(SCENT_SMOKED_FISH);
	scentTable.push_back(SCENT_SPICES_MIXED);
	scentTable.push_back(SCENT_STIR_FRY);
	scentTable.push_back(SCENT_STRAWBERRY);
	scentTable.push_back(SCENT_SUGAR_SPICE_CHRISTMAS_AROMA);
	scentTable.push_back(SCENT_SWEET_SHERRY);
	scentTable.push_back(SCENT_TANGERINE);
	scentTable.push_back(SCENT_TEA_LEAF);
	scentTable.push_back(SCENT_THAI_CURRY);
	scentTable.push_back(SCENT_TOFFEE_APPLE);
	scentTable.push_back(SCENT_TOMATO_PLANT);
	scentTable.push_back(SCENT_WATERMELON);
	scentTable.push_back(SCENT_WHISKY);
	scentTable.push_back(SCENT_WINE_OAK_CASK);
	scentTable.push_back(SCENT_VANILLA);
	scentTable.push_back(SCENT_WHISKY_SCOTCH);
	scentTable.push_back(SCENT_ALPINE_LAUNDRY_POWDER);
	scentTable.push_back(SCENT_ALPINE);
	scentTable.push_back(SCENT_AMULET);
	scentTable.push_back(SCENT_AQUAWAVE);
	scentTable.push_back(SCENT_ARISTOCRAT);
	scentTable.push_back(SCENT_BABY_POWDER);
	scentTable.push_back(SCENT_BEAUTY_SOAP);
	scentTable.push_back(SCENT_BERGAMOT);
	scentTable.push_back(SCENT_BOILER_ROOM);
	scentTable.push_back(SCENT_BOUQUET);
	scentTable.push_back(SCENT_BREWERY);
	scentTable.push_back(SCENT_BURNING_PEAT);
	scentTable.push_back(SCENT_BURNT_WOOD);
	scentTable.push_back(SCENT_CANNON);
	scentTable.push_back(SCENT_CARNATION);
	scentTable.push_back(SCENT_CARIBBEAN_HOLIDAY);
	scentTable.push_back(SCENT_CARBOLIC_SOAP);
	scentTable.push_back(SCENT_CEDAR_WOOD);
	scentTable.push_back(SCENT_CHAMOMILE);
	scentTable.push_back(SCENT_CHRISTMAS_BERRIES);
	scentTable.push_back(SCENT_CHRISTMAS_TREE);
	scentTable.push_back(SCENT_CHRISTMAS_TIME);
	scentTable.push_back(SCENT_CHURCH_INCENSE);
	scentTable.push_back(SCENT_CLOISTERS);
	scentTable.push_back(SCENT_CLINIC_HOSPITAL);
	scentTable.push_back(SCENT_COAL_FACE);
	scentTable.push_back(SCENT_COAL_FIRE);
	scentTable.push_back(SCENT_COAL_GAS);
	scentTable.push_back(SCENT_COCOMANGO);
	scentTable.push_back(SCENT_CUBAN_CIGAR_SMOKE);
	scentTable.push_back(SCENT_CUT_GRASS);
	scentTable.push_back(SCENT_DEEP_HEAT);
	scentTable.push_back(SCENT_DENTIST_CLOVE_OIL);
	scentTable.push_back(SCENT_DINOSAUR);
	scentTable.push_back(SCENT_DIRTY_LINEN);
	scentTable.push_back(SCENT_DRAGONS_BREATH);
	scentTable.push_back(SCENT_DRESSING_ROOM_FOOTBALL);
	scentTable.push_back(SCENT_EARTHY);
	scentTable.push_back(SCENT_EAU_DE_COLOGNE);
	scentTable.push_back(SCENT_EUCALYPTUS);
	scentTable.push_back(SCENT_EAU_DE_COLOGNE_FACTORY);
	scentTable.push_back(SCENT_FARMYARD);
	scentTable.push_back(SCENT_FACTORY);
	scentTable.push_back(SCENT_FISH_MARKET);
	scentTable.push_back(SCENT_FLATULENCE);
	scentTable.push_back(SCENT_FOOTIE_PITCH);
	scentTable.push_back(SCENT_FOREST);
	scentTable.push_back(SCENT_FOX);
	scentTable.push_back(SCENT_FREESIA);
	scentTable.push_back(SCENT_FRESH_AIR);
	scentTable.push_back(SCENT_FROSTY);
	scentTable.push_back(SCENT_GOLDEN_ONE);
	scentTable.push_back(SCENT_GRASS_HAY);
	scentTable.push_back(SCENT_GUN_SMOKE);
	scentTable.push_back(SCENT_HAVANA_CIGAR);
	scentTable.push_back(SCENT_HAWAIIAN);
	scentTable.push_back(SCENT_HEATHER_BRACKEN);
	scentTable.push_back(SCENT_HONEYSUCKLE);
	scentTable.push_back(SCENT_HOSPITAL_MODERN_DAY);
	scentTable.push_back(SCENT_HYACINTH);
	scentTable.push_back(SCENT_INCENSE);
	scentTable.push_back(SCENT_IRON_SMELTING);
	scentTable.push_back(SCENT_JAGUAR_SPRAY);
	scentTable.push_back(SCENT_JAPANESE_POW);
	scentTable.push_back(SCENT_LAVENDER);
	scentTable.push_back(SCENT_LEATHER_CREAM);
	scentTable.push_back(SCENT_LEATHER_HIDE);
	scentTable.push_back(SCENT_LEMON_EUCALYPTUS_MINT);
	scentTable.push_back(SCENT_MACHINE_OIL);
	scentTable.push_back(SCENT_MAHOGANY);
	scentTable.push_back(SCENT_MAN_O_WAR);
	scentTable.push_back(SCENT_MANURE_BR_METHANE);
	scentTable.push_back(SCENT_MODERN_DAY_HOSPITAL);
	scentTable.push_back(SCENT_MOUNTAIN_HEATHER);
	scentTable.push_back(SCENT_MUMMY_EGYPTIAN);
	scentTable.push_back(SCENT_MUSTY);
	scentTable.push_back(SCENT_OAK);
	scentTable.push_back(SCENT_OLD_DRIFTER_SHIP);
	scentTable.push_back(SCENT_OLD_INN);
	scentTable.push_back(SCENT_OLD_RIVER);
	scentTable.push_back(SCENT_OLD_SMITHY);
	scentTable.push_back(SCENT_OUT_AT_SEA);
	scentTable.push_back(SCENT_OZONE);
	scentTable.push_back(SCENT_PEAT);
	scentTable.push_back(SCENT_PENCIL_WOOD_SHAVINGS);
	scentTable.push_back(SCENT_PEONY);
	scentTable.push_back(SCENT_PHOSGENE_GAS);
	scentTable.push_back(SCENT_PINE);
	scentTable.push_back(SCENT_PINEAPPLE_PLANTATION);
	scentTable.push_back(SCENT_PINE_HEATHER_PEAT);
	scentTable.push_back(SCENT_PIT_PONIES);
	scentTable.push_back(SCENT_POLISH_WAX);
	scentTable.push_back(SCENT_POT_POURRI);
	scentTable.push_back(SCENT_RIVERBANK);
	scentTable.push_back(SCENT_RIVER_TROPICS);
	scentTable.push_back(SCENT_ROPE_TAR);
	scentTable.push_back(SCENT_ROSEWOOD);
	scentTable.push_back(SCENT_RUBBISH_ACRID);
	scentTable.push_back(SCENT_SANDALWOOD);
	scentTable.push_back(SCENT_SANDALWOOD_BASIL);
	scentTable.push_back(SCENT_SEA_BREEZE);
	scentTable.push_back(SCENT_SEA_SHORE);
	scentTable.push_back(SCENT_SHEBA);
	scentTable.push_back(SCENT_SHIPS_CANNON);
	scentTable.push_back(SCENT_SNOWDROP);
	scentTable.push_back(SCENT_SPORTS_CHANGING_ROOM);
	scentTable.push_back(SCENT_STABLES_HORSES);
	scentTable.push_back(SCENT_STARS_DRESSING_ROOM);
	scentTable.push_back(SCENT_STEAM_OIL_SHIPS);
	scentTable.push_back(SCENT_STEAM_OIL_TRAINS);
	scentTable.push_back(SCENT_STREET_1930S);
	scentTable.push_back(SCENT_STREET_BOMB);
	scentTable.push_back(SCENT_SUN_SAND_COCONUT);
	scentTable.push_back(SCENT_SWAMP);
	scentTable.push_back(SCENT_SWEATY_FEET);
	scentTable.push_back(SCENT_SWEET_PEAS);
	scentTable.push_back(SCENT_TOBACCO_LEAF);
	scentTable.push_back(SCENT_TRAIN_SMOKE);
	scentTable.push_back(SCENT_TROPHY_ROOM);
	scentTable.push_back(SCENT_TROPICAL);
	scentTable.push_back(SCENT_TROPICAL_RAIN_FOREST);
	scentTable.push_back(SCENT_UNISEX_PERFUME);
	scentTable.push_back(SCENT_URINE);
	scentTable.push_back(SCENT_USA_SWAMP);
	scentTable.push_back(SCENT_VICTORIAN_LAVENDER);
	scentTable.push_back(SCENT_VIOLETS);
	scentTable.push_back(SCENT_VOLCANO);
	scentTable.push_back(SCENT_VOMIT);
	scentTable.push_back(SCENT_WALLFLOWER);
	scentTable.push_back(SCENT_WASHDAY);
	scentTable.push_back(SCENT_WILD_STAG);
	scentTable.push_back(SCENT_WINE_CASK_OAK);
	scentTable.push_back(SCENT_WISTERIA);
	scentTable.push_back(SCENT_WOODSMOKE);
	scentTable.push_back(SCENT_YLANG_JASMIN_MYRRH);
	scentTable.push_back(SCENT_YULETIDE);
	scentTable.push_back(SCENT_AFRICAN_RAIN);
	scentTable.push_back(SCENT_ALLEGRIA);
	scentTable.push_back(SCENT_AMBER);
	scentTable.push_back(SCENT_APPLE_GREEN);
	scentTable.push_back(SCENT_ASAFOETIDA);
	scentTable.push_back(SCENT_AUTUMN_FIELDS);
	scentTable.push_back(SCENT_AUTUMN_HARVEST);
	scentTable.push_back(SCENT_BALSAM_FIR);
	scentTable.push_back(SCENT_BALSAM_FIR_NEEDLE);
	scentTable.push_back(SCENT_BARNYARD);
	scentTable.push_back(SCENT_BEER);
	scentTable.push_back(SCENT_BENZOIN);
	scentTable.push_back(SCENT_BIRCH_TAR);
	scentTable.push_back(SCENT_BIRTHDAY_CAKE);
	scentTable.push_back(SCENT_BLUEBERRY_COBBLER);
	scentTable.push_back(SCENT_BOUQUET_OF_ROSES);
	scentTable.push_back(SCENT_BUCHU);
	scentTable.push_back(SCENT_BURNING_RUBBER);
	scentTable.push_back(SCENT_CACTUS_FLOWER);
	scentTable.push_back(SCENT_CADE);
	scentTable.push_back(SCENT_CAMPFIRE);
	scentTable.push_back(SCENT_CAMPFIRE_SMOKE);
	scentTable.push_back(SCENT_CAMPHOR);
	scentTable.push_back(SCENT_CARIBBEAN_NIGHT);
	scentTable.push_back(SCENT_CEDAR);
	scentTable.push_back(SCENT_CHAMPAGNE_STRAWBERRIES);
	scentTable.push_back(SCENT_CHANEL_NO5_TYPE);
	scentTable.push_back(SCENT_CHOCOLATE);
	scentTable.push_back(SCENT_CHRISTMAS_COOKIES);
	scentTable.push_back(SCENT_CLEAN_COTTON);
	scentTable.push_back(SCENT_COTTON_CANDY);
	scentTable.push_back(SCENT_CREME_BRULE);
	scentTable.push_back(SCENT_CYPRESS_GROVE);
	scentTable.push_back(SCENT_DUMPSTER);
	scentTable.push_back(SCENT_DUNG);
	scentTable.push_back(SCENT_EASTER_LILLIES);
	scentTable.push_back(SCENT_EGG_NOG_2);
	scentTable.push_back(SCENT_EUCALYPTUS_DIVES);
	scentTable.push_back(SCENT_EVERGREEN);
	scentTable.push_back(SCENT_EXHAUST);
	scentTable.push_back(SCENT_FISH);
	scentTable.push_back(SCENT_FOREST_RAIN);
	scentTable.push_back(SCENT_FORGET_ME_NOT);
	scentTable.push_back(SCENT_FRANGIPANI);
	scentTable.push_back(SCENT_FRENCH_FRIES);
	scentTable.push_back(SCENT_FRESH_BREAD);
	scentTable.push_back(SCENT_FRESH_CUT_GRASS);
	scentTable.push_back(SCENT_FRESH_LAUNDRY);
	scentTable.push_back(SCENT_FRYING_BACON);
	scentTable.push_back(SCENT_FUDGE_BROWNIE);
	scentTable.push_back(SCENT_GARDENIA);
	scentTable.push_back(SCENT_GRANDMAS_ATTIC);
	scentTable.push_back(SCENT_HALLOWEEN_GREASEPAINT);
	scentTable.push_back(SCENT_HAWAIAN_TREAT);
	scentTable.push_back(SCENT_INDIAN_SUMMER);
	scentTable.push_back(SCENT_JET_FUEL);
	scentTable.push_back(SCENT_JUNIPER_BERRY);
	scentTable.push_back(SCENT_LEATHER);
	scentTable.push_back(SCENT_LOTUS);
	scentTable.push_back(SCENT_MANGO_MANDARIN);
	scentTable.push_back(SCENT_MAPLE_SYRUP);
	scentTable.push_back(SCENT_MILDEW);
	scentTable.push_back(SCENT_MOTHER_EARTH);
	scentTable.push_back(SCENT_MUSK);
	scentTable.push_back(SCENT_NEW_MOWN_GRASS_2);
	scentTable.push_back(SCENT_NEW_MOWN_GRASS_3);
	scentTable.push_back(SCENT_OAK_MOSS);
	scentTable.push_back(SCENT_OPEN_FIREPLACE);
	scentTable.push_back(SCENT_PALMAROSA);
	scentTable.push_back(SCENT_PANCAKES_AND_MAPLE_SYRUP);
	scentTable.push_back(SCENT_PATCHOULI);
	scentTable.push_back(SCENT_PECAN_PIE);
	scentTable.push_back(SCENT_RAIN_FOREST);
	scentTable.push_back(SCENT_RICH_POTTING_SOIL);
	scentTable.push_back(SCENT_ROASTED_CHICKEN);
	scentTable.push_back(SCENT_SAGE_DALMATIAN);
	scentTable.push_back(SCENT_SEAWEED);
	scentTable.push_back(SCENT_SPANISH_MOSS);
	scentTable.push_back(SCENT_SPRING_BOUQUET);
	scentTable.push_back(SCENT_SUNTAN);
	scentTable.push_back(SCENT_THYME_BORNEOL);
	scentTable.push_back(SCENT_TOMATO_VINE);
	scentTable.push_back(SCENT_TUBEROSE);
	scentTable.push_back(SCENT_VIOLET);
	scentTable.push_back(SCENT_WARMING_GINGER);
	scentTable.push_back(SCENT_YLANG_YLANG);
	
	sprayingTypeTable.push_back(SPRAYINGTYPE_WATER);
}

Classification::~Classification()
{
}

std::vector<std::string> Classification::getLocationTable() 
{
	return locationTable;
}
	
bool Classification::containsLocation(std::string locationURI) 
{
	bool found = false;
	bool retVal = false;
	for(unsigned int i = 0; i < locationTable.size() && !found; i++)
    {
		if (strcmp(locationTable.at(i).c_str(), locationURI.c_str()) == 0)
		{
			found = true;
			retVal = true;
		}
    }

	return retVal;
}

std::map<std::string, COLORREF> Classification::getColorTable() 
{
	return colorTable;
}
	
bool Classification::containsColor(std::string colorURI) 
{
	if(colorTable.find(colorURI) == colorTable.end())
		return false;
	else
		return true;
}
	
COLORREF Classification::getRGBforColor(std::string colorURI) 
{
	std::map<std::string, COLORREF>::iterator iter = colorTable.find(colorURI);
	if(iter == colorTable.end())
		return NULL;
	else
		return iter->second;
}

std::vector<std::string> Classification::getScentTable() {
	return scentTable;
}
	
bool Classification::containsScent(std::string scentURI) {
	bool found = false;
	bool retVal = false;
	for(unsigned int i = 0; i < scentTable.size() && !found; i++)
    {
		if (strcmp(scentTable.at(i).c_str(), scentURI.c_str()) == 0)
		{
			found = true;
			retVal = true;
		}
    }

	return retVal;
}
	
std::vector<std::string> Classification::getSprayingTypeTable() {
	return sprayingTypeTable;
}
	
bool Classification::containsSprayingType(std::string sprayingTypeURI) {
	bool found = false;
	bool retVal = false;
	for(unsigned int i = 0; i < sprayingTypeTable.size() && !found; i++)
    {
		if (strcmp(sprayingTypeTable.at(i).c_str(), sprayingTypeURI.c_str()) == 0)
		{
			found = true;
			retVal = true;
		}
    }

	return retVal;
}
