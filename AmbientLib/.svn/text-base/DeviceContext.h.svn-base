#pragma once


#define LOAD_DRIVER							1

// error states
#define		DEVICE_ERROR					-1
#define		DEVICE_ERROR_OPEN_DRIVER_LIST	1
#define		DEVICE_ERROR_LOADING_DRIVERS	2
#define		DEVICE_ERROR_PLAYEFFECTATTIME	3
#define		DEVICE_NO_ERROR					0

class DeviceContext
{
private:

//	std::vector<DeviceInterface *> devices;
//	std::vector<ptr<std::vector<int>>> supportedTypes;
	std::map<DeviceInterface *,ptr<std::vector<int>>> devices;	// this vector holds all initialized devices
	std::vector<HINSTANCE> loadedPlugins;
	int errorMessage;
	double last_timestamp;
public:
	DeviceContext(bool disableFateTime);
	DeviceContext(bool disableFateTime, std::vector<Element *> elements);
	DeviceContext();
	~DeviceContext(void);

	int	getErrorMessage();
	std::vector<std::string> getDeviceErrors();
	int AddEffectsToDevices(std::vector<Element *> elements);
	bool playEffectAtTime(double time);
	
	void colorToDevice(std::string, int r, int g, int b);
	void devicesDisplayColor();
	void activateDevice(unsigned int DEVICE, bool activate);
	void activateAllAvailableDevices(bool activate);
	void activateAutoColor(bool activate);

	void setVideoLength(double length);
	
};



DeviceContext *GetDeviceContext();
DeviceContext *GetDeviceContext(bool disableFateTime,std::vector<Element *> elements);
DeviceContext *GetDeviceContext(bool disableFateTime);
void ReleaseDeviceContext();