#pragma once

namespace AmbientLib {

#define WIDTH_SPLITTING		((float)1/6)
#define HEIGHT_SPLITTING	((float)1/5)
#define NS_PIECES			(4)
#define WE_PIECES			(3)
#define NWNESWSE_PIECES		(1)

#define LOC_CENTER			0	//NYI
#define LOC_NORTH			1
#define LOC_NORTHWEST		2
#define LOC_NORTHEAST		3
#define LOC_WEST			4
#define LOC_EAST			5
#define LOC_SOUTHWEST		6
#define LOC_SOUTHEAST		7
#define LOC_SOUTH			8

#define DEFINED_LOCATIONS	9
#define MAX_COMPONENTS		4
typedef struct {

	double x;
	double y;

}point;


typedef struct {

	point p;
	double m;
	double n;
}straight;

class ScreenSplitter
{
private:
	unsigned int width, height;
	double mx,my;
	point p1,p2,p3,p4;
	straight g1,g2,g3,g4;
	unsigned char *mem;
	std::map<unsigned char, std::string> mapping;		// provide a mapping between mpeg V standard and our classification
	
	unsigned int container[DEFINED_LOCATIONS][5];

public:
	ScreenSplitter(unsigned int width, unsigned int height);
	~ScreenSplitter(void);
	bool inRegionN(unsigned int x, unsigned int y);
	bool inRegionNW(unsigned int x, unsigned int y);
	bool inRegionW(unsigned int x, unsigned int y);
	bool inRegionSW(unsigned int x, unsigned int y);
	bool inRegionS(unsigned int x, unsigned int y);
	bool inRegionSE(unsigned int x, unsigned int y);
	bool inRegionE(unsigned int x, unsigned int y);
	bool inRegionNE(unsigned int x, unsigned int y);

	bool inRegionNAndS(straight &_g1, straight &_g2, unsigned int x, unsigned int y, bool swap);
	bool inRegionWAndE(straight &_g1, straight &_g2, unsigned int x, unsigned int y, bool swap);
	
	void insert(unsigned int x, unsigned int y, unsigned int c1, unsigned int c2, unsigned int c3, unsigned int c4);
	void insert(unsigned int x, unsigned int y, unsigned int c1, unsigned int c2, unsigned int c3, unsigned int c4, unsigned int count);
	
	void insertAtLocation(unsigned int location, unsigned int c1, unsigned int c2, unsigned int c3, unsigned int c4, unsigned int count);
	void insertAtLocation(unsigned int location, unsigned int c1, unsigned int c2, unsigned int c3, unsigned int count);
	std::string getMapping(unsigned char LOCATION);
	unsigned int getLocationComponent(unsigned int comp, unsigned char LOCATION);
	unsigned int getLocation(unsigned int x, unsigned int y);
	unsigned int getEnumLocations();
	void reset();

};

}