#pragma once

namespace AmbientLib{
	namespace HTTP{

/*
 * HTTP status codes, taken from RFC 2616
 */ 
#define HTTP_CONTINUE				100	 // Section 10.1.1: Continue
#define HTTP_SWITCHING_PROTOCOLS	101	 // Section 10.1.2: Switching Protocols
#define HTTP_OK						200	 // Section 10.2.1: OK
#define HTTP_CREATED				201	 // Section 10.2.2: Created
#define HTTP_ACCEPTED				202	 // Section 10.2.3: Accepted
#define HTTP_NONAUTHINF				203	 // Section 10.2.4: Non-Authoritative Information
#define HTTP_NO_CONTENT				204  // Section 10.2.5: No Content
#define HTTP_RESET_CONTENT			205  // Section 10.2.6: Reset Content
#define HTTP_PARTIAL_CONTENT		206  // Section 10.2.7: Partial Content
#define HTTP_MULTIPLE_CHOICES		300  // Section 10.3.1: Multiple Choices
#define HTTP_MOVED_PERMANENTLY		301  // Section 10.3.2: Moved Permanently
#define HTTP_FOUND					302  // Section 10.3.3: Found
#define HTTP_SEE_OTHER				303  // Section 10.3.4: See Other
#define HTTP_NOT_MODIFIED			304  // Section 10.3.5: Not Modified
#define HTTP_USE_PROXY				305  // Section 10.3.6: Use Proxy
#define HTTP_TEMPORARY_REDIRECT		307  // Section 10.3.8: Temporary Redirect
#define HTTP_BAD_REQUEST			400  // Section 10.4.1: Bad Request
#define HTTP_UNAUTORIZED			401  // Section 10.4.2: Unauthorized
#define HTTP_PAYEMENT_REQUIRED		402  // Section 10.4.3: Payment Required
#define HTTP_FORBIDDEN				403  // Section 10.4.4: Forbidden
#define HTTP_NOT_FOUND				404  // Section 10.4.5: Not Found
#define HTTP_NOT_ALLOWED			405  // Section 10.4.6: Method Not Allowed
#define HTTP_NOT_ACCEPTABLE			406  // Section 10.4.7: Not Acceptable
#define HTTP_PROXY_AUTH_REQUIRED	407  // Section 10.4.8: Proxy Authentication Required
#define HTTP_REQUEST_TIMEOUT		408  // Section 10.4.9: Request Time-out
#define HTTP_CONFLICT				409  // Section 10.4.10: Conflict
#define HTTP_GONE					410  // Section 10.4.11: Gone
#define HTTP_LENGTH_REQUIRED		411  // Section 10.4.12: Length Required
#define HTTP_PRECONDITION_FAILED	412  // Section 10.4.13: Precondition Failed
#define HTTP_REQUEST_TOO_LARGE		413  // Section 10.4.14: Request Entity Too Large
#define HTTP_REQUEST_URI_TOO_LARGE	414  // Section 10.4.15: Request-URI Too Large
#define HTTP_UNSUPPORTED_MEDIA_TYPE	415  // Section 10.4.16: Unsupported Media Type
#define HTTP_REQUEST_RANGE_INVALID	416  // Section 10.4.17: Requested range not satisfiable
#define HTTP_EXPECTATION_FAILED		417  // Section 10.4.18: Expectation Failed
#define HTTP_INTERNAL_SERVER_ERROR	500  // Section 10.5.1: Internal Server Error
#define HTTP_NOT_IMPLEMENTED		501  // Section 10.5.2: Not Implemented
#define HTTP_BAD_GATEWAY			502  // Section 10.5.3: Bad Gateway
#define HTTP_SERVICE_UNVAILABLE		503  // Section 10.5.4: Service Unavailable
#define HTTP_GATEWAY_TIMEOUT		504  // Section 10.5.5: Gateway Time-out
#define HTTP_VERSION_NOT_SUPPORTED	505  // Section 10.5.6: HTTP Version not supported

class HTTPResponse
{
private:
	unsigned int statusCode;
	std::string payload;
	std::string header;
public:
	HTTPResponse(std::string response);		// this parses the given response
	HTTPResponse(void);						// this sets up an response
	~HTTPResponse(void);
	std::string getPayload();
	std::string getHeader();
	unsigned int getStatusCode();
	static std::string getFieldValue(const char* HTTPFIELD, std::string str);

};
	}
}
